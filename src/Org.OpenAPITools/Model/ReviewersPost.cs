/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Create a reviewer. A reviewer is linked to a signer and  receives emailed copies of draft and signed documents. N.B. they only receive them if their associated signer does. Therefore make sure your admin/experience settings are set to attach PDFs to your signer emails. You can set to include the signing link to a reviewer, and thereby hit the use case to send a document to a group of people where the first who signs, signs.
    /// </summary>
    [DataContract]
    public partial class ReviewersPost :  IEquatable<ReviewersPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewersPost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ReviewersPost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ReviewersPost" /> class.
        /// </summary>
        /// <param name="firstname">firstname.</param>
        /// <param name="lastname">lastname.</param>
        /// <param name="email">email (required).</param>
        /// <param name="includeLink">include a link to the signing pages enabling a reviewer to signer (default to false).</param>
        public ReviewersPost(string firstname = default(string), string lastname = default(string), string email = default(string), bool includeLink = false)
        {
            // to ensure "email" is required (not null)
            if (email == null)
            {
                throw new InvalidDataException("email is a required property for ReviewersPost and cannot be null");
            }
            else
            {
                this.Email = email;
            }

            this.Firstname = firstname;
            this.Lastname = lastname;
            // use default value if no "includeLink" provided
            if (includeLink == null)
            {
                this.IncludeLink = false;
            }
            else
            {
                this.IncludeLink = includeLink;
            }
        }

        /// <summary>
        /// Gets or Sets Firstname
        /// </summary>
        [DataMember(Name="firstname", EmitDefaultValue=false)]
        public string Firstname { get; set; }

        /// <summary>
        /// Gets or Sets Lastname
        /// </summary>
        [DataMember(Name="lastname", EmitDefaultValue=false)]
        public string Lastname { get; set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="email", EmitDefaultValue=true)]
        public string Email { get; set; }

        /// <summary>
        /// include a link to the signing pages enabling a reviewer to signer
        /// </summary>
        /// <value>include a link to the signing pages enabling a reviewer to signer</value>
        [DataMember(Name="include_link", EmitDefaultValue=false)]
        public bool IncludeLink { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ReviewersPost {\n");
            sb.Append("  Firstname: ").Append(Firstname).Append("\n");
            sb.Append("  Lastname: ").Append(Lastname).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  IncludeLink: ").Append(IncludeLink).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ReviewersPost);
        }

        /// <summary>
        /// Returns true if ReviewersPost instances are equal
        /// </summary>
        /// <param name="input">Instance of ReviewersPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ReviewersPost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Firstname == input.Firstname ||
                    (this.Firstname != null &&
                    this.Firstname.Equals(input.Firstname))
                ) && 
                (
                    this.Lastname == input.Lastname ||
                    (this.Lastname != null &&
                    this.Lastname.Equals(input.Lastname))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.IncludeLink == input.IncludeLink ||
                    (this.IncludeLink != null &&
                    this.IncludeLink.Equals(input.IncludeLink))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Firstname != null)
                    hashCode = hashCode * 59 + this.Firstname.GetHashCode();
                if (this.Lastname != null)
                    hashCode = hashCode * 59 + this.Lastname.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.IncludeLink != null)
                    hashCode = hashCode * 59 + this.IncludeLink.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Firstname (string) maxLength
            if(this.Firstname != null && this.Firstname.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Firstname, length must be less than 60.", new [] { "Firstname" });
            }


            // Lastname (string) maxLength
            if(this.Lastname != null && this.Lastname.Length > 60)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Lastname, length must be less than 60.", new [] { "Lastname" });
            }


            yield break;
        }
    }

}
