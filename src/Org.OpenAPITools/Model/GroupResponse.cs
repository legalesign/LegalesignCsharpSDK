/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// GroupResponse
    /// </summary>
    [DataContract]
    public partial class GroupResponse :  IEquatable<GroupResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GroupResponse" /> class.
        /// </summary>
        /// <param name="created">created.</param>
        /// <param name="defaultEmail">defaultEmail.</param>
        /// <param name="defaultExtraemail">defaultExtraemail.</param>
        /// <param name="footer">html of content.</param>
        /// <param name="footerHeight">footerHeight.</param>
        /// <param name="header">header.</param>
        /// <param name="isActive">isActive.</param>
        /// <param name="members">list of members uris.</param>
        /// <param name="modified">modified.</param>
        /// <param name="name">name.</param>
        /// <param name="pagesize">pagesize.</param>
        /// <param name="publicName">publicName.</param>
        /// <param name="resourceUri">resourceUri.</param>
        /// <param name="slug">slug.</param>
        /// <param name="user">user.</param>
        /// <param name="xframeAllow">xframeAllow.</param>
        /// <param name="xframeAllowPdfEdit">xframeAllowPdfEdit.</param>
        public GroupResponse(DateTime created = default(DateTime), string defaultEmail = default(string), string defaultExtraemail = default(string), string footer = default(string), int footerHeight = default(int), string header = default(string), bool isActive = default(bool), List<string> members = default(List<string>), DateTime modified = default(DateTime), string name = default(string), int pagesize = default(int), string publicName = default(string), string resourceUri = default(string), string slug = default(string), string user = default(string), bool xframeAllow = default(bool), bool xframeAllowPdfEdit = default(bool))
        {
            this.Created = created;
            this.DefaultEmail = defaultEmail;
            this.DefaultExtraemail = defaultExtraemail;
            this.Footer = footer;
            this.FooterHeight = footerHeight;
            this.Header = header;
            this.IsActive = isActive;
            this.Members = members;
            this.Modified = modified;
            this.Name = name;
            this.Pagesize = pagesize;
            this.PublicName = publicName;
            this.ResourceUri = resourceUri;
            this.Slug = slug;
            this.User = user;
            this.XframeAllow = xframeAllow;
            this.XframeAllowPdfEdit = xframeAllowPdfEdit;
        }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets DefaultEmail
        /// </summary>
        [DataMember(Name="default_email", EmitDefaultValue=false)]
        public string DefaultEmail { get; set; }

        /// <summary>
        /// Gets or Sets DefaultExtraemail
        /// </summary>
        [DataMember(Name="default_extraemail", EmitDefaultValue=false)]
        public string DefaultExtraemail { get; set; }

        /// <summary>
        /// html of content
        /// </summary>
        /// <value>html of content</value>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }

        /// <summary>
        /// Gets or Sets FooterHeight
        /// </summary>
        [DataMember(Name="footer_height", EmitDefaultValue=false)]
        public int? FooterHeight { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Gets or Sets IsActive
        /// </summary>
        [DataMember(Name="is_active", EmitDefaultValue=false)]
        public bool IsActive { get; set; }

        /// <summary>
        /// list of members uris
        /// </summary>
        /// <value>list of members uris</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<string> Members { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pagesize
        /// </summary>
        [DataMember(Name="pagesize", EmitDefaultValue=false)]
        public int Pagesize { get; set; }

        /// <summary>
        /// Gets or Sets PublicName
        /// </summary>
        [DataMember(Name="public_name", EmitDefaultValue=false)]
        public string PublicName { get; set; }

        /// <summary>
        /// Gets or Sets ResourceUri
        /// </summary>
        [DataMember(Name="resource_uri", EmitDefaultValue=false)]
        public string ResourceUri { get; set; }

        /// <summary>
        /// Gets or Sets Slug
        /// </summary>
        [DataMember(Name="slug", EmitDefaultValue=false)]
        public string Slug { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets XframeAllow
        /// </summary>
        [DataMember(Name="xframe_allow", EmitDefaultValue=false)]
        public bool XframeAllow { get; set; }

        /// <summary>
        /// Gets or Sets XframeAllowPdfEdit
        /// </summary>
        [DataMember(Name="xframe_allow_pdf_edit", EmitDefaultValue=false)]
        public bool XframeAllowPdfEdit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GroupResponse {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DefaultEmail: ").Append(DefaultEmail).Append("\n");
            sb.Append("  DefaultExtraemail: ").Append(DefaultExtraemail).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  FooterHeight: ").Append(FooterHeight).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pagesize: ").Append(Pagesize).Append("\n");
            sb.Append("  PublicName: ").Append(PublicName).Append("\n");
            sb.Append("  ResourceUri: ").Append(ResourceUri).Append("\n");
            sb.Append("  Slug: ").Append(Slug).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  XframeAllow: ").Append(XframeAllow).Append("\n");
            sb.Append("  XframeAllowPdfEdit: ").Append(XframeAllowPdfEdit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GroupResponse);
        }

        /// <summary>
        /// Returns true if GroupResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GroupResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GroupResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DefaultEmail == input.DefaultEmail ||
                    (this.DefaultEmail != null &&
                    this.DefaultEmail.Equals(input.DefaultEmail))
                ) && 
                (
                    this.DefaultExtraemail == input.DefaultExtraemail ||
                    (this.DefaultExtraemail != null &&
                    this.DefaultExtraemail.Equals(input.DefaultExtraemail))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.FooterHeight == input.FooterHeight ||
                    (this.FooterHeight != null &&
                    this.FooterHeight.Equals(input.FooterHeight))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.IsActive == input.IsActive ||
                    (this.IsActive != null &&
                    this.IsActive.Equals(input.IsActive))
                ) && 
                (
                    this.Members == input.Members ||
                    this.Members != null &&
                    input.Members != null &&
                    this.Members.SequenceEqual(input.Members)
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pagesize == input.Pagesize ||
                    (this.Pagesize != null &&
                    this.Pagesize.Equals(input.Pagesize))
                ) && 
                (
                    this.PublicName == input.PublicName ||
                    (this.PublicName != null &&
                    this.PublicName.Equals(input.PublicName))
                ) && 
                (
                    this.ResourceUri == input.ResourceUri ||
                    (this.ResourceUri != null &&
                    this.ResourceUri.Equals(input.ResourceUri))
                ) && 
                (
                    this.Slug == input.Slug ||
                    (this.Slug != null &&
                    this.Slug.Equals(input.Slug))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.XframeAllow == input.XframeAllow ||
                    (this.XframeAllow != null &&
                    this.XframeAllow.Equals(input.XframeAllow))
                ) && 
                (
                    this.XframeAllowPdfEdit == input.XframeAllowPdfEdit ||
                    (this.XframeAllowPdfEdit != null &&
                    this.XframeAllowPdfEdit.Equals(input.XframeAllowPdfEdit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DefaultEmail != null)
                    hashCode = hashCode * 59 + this.DefaultEmail.GetHashCode();
                if (this.DefaultExtraemail != null)
                    hashCode = hashCode * 59 + this.DefaultExtraemail.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.FooterHeight != null)
                    hashCode = hashCode * 59 + this.FooterHeight.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.IsActive != null)
                    hashCode = hashCode * 59 + this.IsActive.GetHashCode();
                if (this.Members != null)
                    hashCode = hashCode * 59 + this.Members.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pagesize != null)
                    hashCode = hashCode * 59 + this.Pagesize.GetHashCode();
                if (this.PublicName != null)
                    hashCode = hashCode * 59 + this.PublicName.GetHashCode();
                if (this.ResourceUri != null)
                    hashCode = hashCode * 59 + this.ResourceUri.GetHashCode();
                if (this.Slug != null)
                    hashCode = hashCode * 59 + this.Slug.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.XframeAllow != null)
                    hashCode = hashCode * 59 + this.XframeAllow.GetHashCode();
                if (this.XframeAllowPdfEdit != null)
                    hashCode = hashCode * 59 + this.XframeAllowPdfEdit.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
