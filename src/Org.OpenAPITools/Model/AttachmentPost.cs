/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AttachmentPost
    /// </summary>
    [DataContract]
    public partial class AttachmentPost :  IEquatable<AttachmentPost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentPost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AttachmentPost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AttachmentPost" /> class.
        /// </summary>
        /// <param name="group">URI of the group name (required).</param>
        /// <param name="pdfFile">Base64 encoded PDF file data, max size is a group setting, 5MB by default (required).</param>
        /// <param name="filename">Simple alphanumeric name ending .pdf (required).</param>
        /// <param name="user">Assign to group member if not the api user.</param>
        /// <param name="description">description.</param>
        public AttachmentPost(string group = default(string), byte[] pdfFile = default(byte[]), string filename = default(string), string user = default(string), string description = default(string))
        {
            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new InvalidDataException("group is a required property for AttachmentPost and cannot be null");
            }
            else
            {
                this.Group = group;
            }

            // to ensure "pdfFile" is required (not null)
            if (pdfFile == null)
            {
                throw new InvalidDataException("pdfFile is a required property for AttachmentPost and cannot be null");
            }
            else
            {
                this.PdfFile = pdfFile;
            }

            // to ensure "filename" is required (not null)
            if (filename == null)
            {
                throw new InvalidDataException("filename is a required property for AttachmentPost and cannot be null");
            }
            else
            {
                this.Filename = filename;
            }

            this.User = user;
            this.Description = description;
        }

        /// <summary>
        /// URI of the group name
        /// </summary>
        /// <value>URI of the group name</value>
        [DataMember(Name="group", EmitDefaultValue=true)]
        public string Group { get; set; }

        /// <summary>
        /// Base64 encoded PDF file data, max size is a group setting, 5MB by default
        /// </summary>
        /// <value>Base64 encoded PDF file data, max size is a group setting, 5MB by default</value>
        [DataMember(Name="pdf_file", EmitDefaultValue=true)]
        public byte[] PdfFile { get; set; }

        /// <summary>
        /// Simple alphanumeric name ending .pdf
        /// </summary>
        /// <value>Simple alphanumeric name ending .pdf</value>
        [DataMember(Name="filename", EmitDefaultValue=true)]
        public string Filename { get; set; }

        /// <summary>
        /// Assign to group member if not the api user
        /// </summary>
        /// <value>Assign to group member if not the api user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentPost {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  PdfFile: ").Append(PdfFile).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AttachmentPost);
        }

        /// <summary>
        /// Returns true if AttachmentPost instances are equal
        /// </summary>
        /// <param name="input">Instance of AttachmentPost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentPost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.PdfFile == input.PdfFile ||
                    (this.PdfFile != null &&
                    this.PdfFile.Equals(input.PdfFile))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.PdfFile != null)
                    hashCode = hashCode * 59 + this.PdfFile.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Group (string) maxLength
            if(this.Group != null && this.Group.Length > 90)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Group, length must be less than 90.", new [] { "Group" });
            }


            // Group (string) pattern
            Regex regexGroup = new Regex(@"^\/api\/v1\/group\/[-\\w]{1,50}\/$", RegexOptions.CultureInvariant);
            if (false == regexGroup.Match(this.Group).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Group, must match a pattern of " + regexGroup, new [] { "Group" });
            }

            // Filename (string) maxLength
            if(this.Filename != null && this.Filename.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filename, length must be less than 250.", new [] { "Filename" });
            }


            // Filename (string) pattern
            Regex regexFilename = new Regex(@"^[-\\w]{1,250}.pdf$", RegexOptions.CultureInvariant);
            if (false == regexFilename.Match(this.Filename).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Filename, must match a pattern of " + regexFilename, new [] { "Filename" });
            }



            // User (string) pattern
            Regex regexUser = new Regex(@"^\/api\/v1\/user\/[-\\w]{1,75}\/$", RegexOptions.CultureInvariant);
            if (false == regexUser.Match(this.User).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for User, must match a pattern of " + regexUser, new [] { "User" });
            }

            // Description (string) maxLength
            if(this.Description != null && this.Description.Length > 250)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Description, length must be less than 250.", new [] { "Description" });
            }


            yield break;
        }
    }

}
