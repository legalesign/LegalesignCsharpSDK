/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineResponse200
    /// </summary>
    [DataContract]
    public partial class InlineResponse200 :  IEquatable<InlineResponse200>, IValidatableObject
    {
        /// <summary>
        /// Defines ElementType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ElementTypeEnum
        {
            /// <summary>
            /// Enum Signature for value: signature
            /// </summary>
            [EnumMember(Value = "signature")]
            Signature = 1,

            /// <summary>
            /// Enum Initials for value: initials
            /// </summary>
            [EnumMember(Value = "initials")]
            Initials = 2,

            /// <summary>
            /// Enum Admin for value: admin
            /// </summary>
            [EnumMember(Value = "admin")]
            Admin = 3,

            /// <summary>
            /// Enum Text for value: text
            /// </summary>
            [EnumMember(Value = "text")]
            Text = 4

        }

        /// <summary>
        /// Gets or Sets ElementType
        /// </summary>
        [DataMember(Name="element_type", EmitDefaultValue=false)]
        public ElementTypeEnum? ElementType { get; set; }
        /// <summary>
        /// Gets or Sets Validation
        /// </summary>
        [DataMember(Name="validation", EmitDefaultValue=true)]
        public PdfFieldValidationEnum? Validation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse200" /> class.
        /// </summary>
        /// <param name="elementType">elementType.</param>
        /// <param name="fieldorder">fieldorder.</param>
        /// <param name="label">label.</param>
        /// <param name="labelExtra">labelExtra.</param>
        /// <param name="signers">signers.</param>
        /// <param name="state">if saved by signer.</param>
        /// <param name="validation">validation.</param>
        /// <param name="value">value.</param>
        public InlineResponse200(ElementTypeEnum? elementType = default(ElementTypeEnum?), int? fieldorder = default(int?), string label = default(string), string labelExtra = default(string), int signers = default(int), bool state = default(bool), PdfFieldValidationEnum? validation = default(PdfFieldValidationEnum?), string value = default(string))
        {
            this.Fieldorder = fieldorder;
            this.LabelExtra = labelExtra;
            this.Validation = validation;
            this.ElementType = elementType;
            this.Fieldorder = fieldorder;
            this.Label = label;
            this.LabelExtra = labelExtra;
            this.Signers = signers;
            this.State = state;
            this.Validation = validation;
            this.Value = value;
        }


        /// <summary>
        /// Gets or Sets Fieldorder
        /// </summary>
        [DataMember(Name="fieldorder", EmitDefaultValue=true)]
        public int? Fieldorder { get; set; }

        /// <summary>
        /// Gets or Sets Label
        /// </summary>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or Sets LabelExtra
        /// </summary>
        [DataMember(Name="label_extra", EmitDefaultValue=true)]
        public string LabelExtra { get; set; }

        /// <summary>
        /// Gets or Sets Signers
        /// </summary>
        [DataMember(Name="signers", EmitDefaultValue=false)]
        public int Signers { get; set; }

        /// <summary>
        /// if saved by signer
        /// </summary>
        /// <value>if saved by signer</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public bool State { get; set; }


        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse200 {\n");
            sb.Append("  ElementType: ").Append(ElementType).Append("\n");
            sb.Append("  Fieldorder: ").Append(Fieldorder).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  LabelExtra: ").Append(LabelExtra).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse200);
        }

        /// <summary>
        /// Returns true if InlineResponse200 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse200 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse200 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ElementType == input.ElementType ||
                    (this.ElementType != null &&
                    this.ElementType.Equals(input.ElementType))
                ) && 
                (
                    this.Fieldorder == input.Fieldorder ||
                    (this.Fieldorder != null &&
                    this.Fieldorder.Equals(input.Fieldorder))
                ) && 
                (
                    this.Label == input.Label ||
                    (this.Label != null &&
                    this.Label.Equals(input.Label))
                ) && 
                (
                    this.LabelExtra == input.LabelExtra ||
                    (this.LabelExtra != null &&
                    this.LabelExtra.Equals(input.LabelExtra))
                ) && 
                (
                    this.Signers == input.Signers ||
                    (this.Signers != null &&
                    this.Signers.Equals(input.Signers))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Validation == input.Validation ||
                    (this.Validation != null &&
                    this.Validation.Equals(input.Validation))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ElementType != null)
                    hashCode = hashCode * 59 + this.ElementType.GetHashCode();
                if (this.Fieldorder != null)
                    hashCode = hashCode * 59 + this.Fieldorder.GetHashCode();
                if (this.Label != null)
                    hashCode = hashCode * 59 + this.Label.GetHashCode();
                if (this.LabelExtra != null)
                    hashCode = hashCode * 59 + this.LabelExtra.GetHashCode();
                if (this.Signers != null)
                    hashCode = hashCode * 59 + this.Signers.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.Validation != null)
                    hashCode = hashCode * 59 + this.Validation.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
