/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentPdfPreview
    /// </summary>
    [DataContract]
    public partial class DocumentPdfPreview :  IEquatable<DocumentPdfPreview>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPdfPreview" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DocumentPdfPreview() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentPdfPreview" /> class.
        /// </summary>
        /// <param name="text">raw html (required).</param>
        /// <param name="signeeCount">number of signers (required).</param>
        /// <param name="signatureType">signatureType (required).</param>
        /// <param name="isSignaturePerPage">isSignaturePerPage (required).</param>
        /// <param name="group">group (required).</param>
        /// <param name="title">title.</param>
        /// <param name="header">header.</param>
        /// <param name="footer">footer.</param>
        /// <param name="headerHeight">headerHeight.</param>
        /// <param name="footerHeight">footerHeight.</param>
        /// <param name="pdfheader">Set to true to use group default.</param>
        public DocumentPdfPreview(string text = default(string), int signeeCount = default(int), int signatureType = default(int), int isSignaturePerPage = default(int), string group = default(string), string title = default(string), string header = default(string), string footer = default(string), long headerHeight = default(long), long footerHeight = default(long), bool pdfheader = default(bool))
        {
            // to ensure "text" is required (not null)
            if (text == null)
            {
                throw new InvalidDataException("text is a required property for DocumentPdfPreview and cannot be null");
            }
            else
            {
                this.Text = text;
            }

            // to ensure "signeeCount" is required (not null)
            if (signeeCount == null)
            {
                throw new InvalidDataException("signeeCount is a required property for DocumentPdfPreview and cannot be null");
            }
            else
            {
                this.SigneeCount = signeeCount;
            }

            // to ensure "signatureType" is required (not null)
            if (signatureType == null)
            {
                throw new InvalidDataException("signatureType is a required property for DocumentPdfPreview and cannot be null");
            }
            else
            {
                this.SignatureType = signatureType;
            }

            // to ensure "isSignaturePerPage" is required (not null)
            if (isSignaturePerPage == null)
            {
                throw new InvalidDataException("isSignaturePerPage is a required property for DocumentPdfPreview and cannot be null");
            }
            else
            {
                this.IsSignaturePerPage = isSignaturePerPage;
            }

            // to ensure "group" is required (not null)
            if (group == null)
            {
                throw new InvalidDataException("group is a required property for DocumentPdfPreview and cannot be null");
            }
            else
            {
                this.Group = group;
            }

            this.Title = title;
            this.Header = header;
            this.Footer = footer;
            this.HeaderHeight = headerHeight;
            this.FooterHeight = footerHeight;
            this.Pdfheader = pdfheader;
        }

        /// <summary>
        /// raw html
        /// </summary>
        /// <value>raw html</value>
        [DataMember(Name="text", EmitDefaultValue=true)]
        public string Text { get; set; }

        /// <summary>
        /// number of signers
        /// </summary>
        /// <value>number of signers</value>
        [DataMember(Name="signee_count", EmitDefaultValue=true)]
        public int SigneeCount { get; set; }

        /// <summary>
        /// Gets or Sets SignatureType
        /// </summary>
        [DataMember(Name="signature_type", EmitDefaultValue=true)]
        public int SignatureType { get; set; }

        /// <summary>
        /// Gets or Sets IsSignaturePerPage
        /// </summary>
        [DataMember(Name="is_signature_per_page", EmitDefaultValue=true)]
        public int IsSignaturePerPage { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=true)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Header
        /// </summary>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// Gets or Sets Footer
        /// </summary>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }

        /// <summary>
        /// Gets or Sets HeaderHeight
        /// </summary>
        [DataMember(Name="header_height", EmitDefaultValue=false)]
        public long HeaderHeight { get; set; }

        /// <summary>
        /// Gets or Sets FooterHeight
        /// </summary>
        [DataMember(Name="footer_height", EmitDefaultValue=false)]
        public long FooterHeight { get; set; }

        /// <summary>
        /// Set to true to use group default
        /// </summary>
        /// <value>Set to true to use group default</value>
        [DataMember(Name="pdfheader", EmitDefaultValue=false)]
        public bool Pdfheader { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentPdfPreview {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  SigneeCount: ").Append(SigneeCount).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("  IsSignaturePerPage: ").Append(IsSignaturePerPage).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  HeaderHeight: ").Append(HeaderHeight).Append("\n");
            sb.Append("  FooterHeight: ").Append(FooterHeight).Append("\n");
            sb.Append("  Pdfheader: ").Append(Pdfheader).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentPdfPreview);
        }

        /// <summary>
        /// Returns true if DocumentPdfPreview instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentPdfPreview to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentPdfPreview input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.SigneeCount == input.SigneeCount ||
                    (this.SigneeCount != null &&
                    this.SigneeCount.Equals(input.SigneeCount))
                ) && 
                (
                    this.SignatureType == input.SignatureType ||
                    (this.SignatureType != null &&
                    this.SignatureType.Equals(input.SignatureType))
                ) && 
                (
                    this.IsSignaturePerPage == input.IsSignaturePerPage ||
                    (this.IsSignaturePerPage != null &&
                    this.IsSignaturePerPage.Equals(input.IsSignaturePerPage))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.HeaderHeight == input.HeaderHeight ||
                    (this.HeaderHeight != null &&
                    this.HeaderHeight.Equals(input.HeaderHeight))
                ) && 
                (
                    this.FooterHeight == input.FooterHeight ||
                    (this.FooterHeight != null &&
                    this.FooterHeight.Equals(input.FooterHeight))
                ) && 
                (
                    this.Pdfheader == input.Pdfheader ||
                    (this.Pdfheader != null &&
                    this.Pdfheader.Equals(input.Pdfheader))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.SigneeCount != null)
                    hashCode = hashCode * 59 + this.SigneeCount.GetHashCode();
                if (this.SignatureType != null)
                    hashCode = hashCode * 59 + this.SignatureType.GetHashCode();
                if (this.IsSignaturePerPage != null)
                    hashCode = hashCode * 59 + this.IsSignaturePerPage.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.HeaderHeight != null)
                    hashCode = hashCode * 59 + this.HeaderHeight.GetHashCode();
                if (this.FooterHeight != null)
                    hashCode = hashCode * 59 + this.FooterHeight.GetHashCode();
                if (this.Pdfheader != null)
                    hashCode = hashCode * 59 + this.Pdfheader.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Group (string) pattern
            Regex regexGroup = new Regex(@"^\/api\/v1\/group\/[-\\w]{1,50}\/$", RegexOptions.CultureInvariant);
            if (false == regexGroup.Match(this.Group).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Group, must match a pattern of " + regexGroup, new [] { "Group" });
            }

            yield break;
        }
    }

}
