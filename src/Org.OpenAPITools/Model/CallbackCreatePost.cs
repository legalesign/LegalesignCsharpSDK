/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// CallbackCreatePost
    /// </summary>
    [DataContract]
    public partial class CallbackCreatePost :  IEquatable<CallbackCreatePost>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackCreatePost" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CallbackCreatePost() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CallbackCreatePost" /> class.
        /// </summary>
        /// <param name="url">The URL where you wish to get notified (required).</param>
        /// <param name="notify">The type of callback to receive, value must be all or signed (required).</param>
        public CallbackCreatePost(string url = default(string), string notify = default(string))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for CallbackCreatePost and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "notify" is required (not null)
            if (notify == null)
            {
                throw new InvalidDataException("notify is a required property for CallbackCreatePost and cannot be null");
            }
            else
            {
                this.Notify = notify;
            }

        }

        /// <summary>
        /// The URL where you wish to get notified
        /// </summary>
        /// <value>The URL where you wish to get notified</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// The type of callback to receive, value must be all or signed
        /// </summary>
        /// <value>The type of callback to receive, value must be all or signed</value>
        [DataMember(Name="notify", EmitDefaultValue=true)]
        public string Notify { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CallbackCreatePost {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Notify: ").Append(Notify).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CallbackCreatePost);
        }

        /// <summary>
        /// Returns true if CallbackCreatePost instances are equal
        /// </summary>
        /// <param name="input">Instance of CallbackCreatePost to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CallbackCreatePost input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Notify == input.Notify ||
                    (this.Notify != null &&
                    this.Notify.Equals(input.Notify))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Notify != null)
                    hashCode = hashCode * 59 + this.Notify.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Url (string) pattern
            Regex regexUrl = new Regex(@"^(http|https):\/\/", RegexOptions.CultureInvariant);
            if (false == regexUrl.Match(this.Url).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Url, must match a pattern of " + regexUrl, new [] { "Url" });
            }



            // Notify (string) pattern
            Regex regexNotify = new Regex(@"^(all|signed)$", RegexOptions.CultureInvariant);
            if (false == regexNotify.Match(this.Notify).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Notify, must match a pattern of " + regexNotify, new [] { "Notify" });
            }

            yield break;
        }
    }

}
