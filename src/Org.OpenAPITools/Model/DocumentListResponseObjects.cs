/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentListResponseObjects
    /// </summary>
    [DataContract]
    public partial class DocumentListResponseObjects :  IEquatable<DocumentListResponseObjects>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public SignerStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentListResponseObjects" /> class.
        /// </summary>
        /// <param name="archived">archived.</param>
        /// <param name="autoArchive">autoArchive.</param>
        /// <param name="ccEmails">ccEmails.</param>
        /// <param name="created">created.</param>
        /// <param name="doEmail">doEmail.</param>
        /// <param name="downloadFinal">downloadFinal.</param>
        /// <param name="group">group.</param>
        /// <param name="modified">modified.</param>
        /// <param name="name">name.</param>
        /// <param name="pdftext">pdftext.</param>
        /// <param name="redirect">redirect.</param>
        /// <param name="resourceUri">resourceUri.</param>
        /// <param name="returnSignerLinks">returnSignerLinks.</param>
        /// <param name="signers">nested arrays with signer details.</param>
        /// <param name="signersInOrder">signersInOrder.</param>
        /// <param name="status">status.</param>
        /// <param name="tag">tag.</param>
        /// <param name="template">template.</param>
        /// <param name="templatepdf">templatepdf.</param>
        /// <param name="text">text.</param>
        /// <param name="user">user.</param>
        /// <param name="uuid">uuid.</param>
        public DocumentListResponseObjects(bool archived = default(bool), bool autoArchive = default(bool), string ccEmails = default(string), DateTime created = default(DateTime), bool doEmail = default(bool), bool downloadFinal = default(bool), string group = default(string), DateTime modified = default(DateTime), string name = default(string), string pdftext = default(string), string redirect = default(string), string resourceUri = default(string), bool returnSignerLinks = default(bool), List<List<string>> signers = default(List<List<string>>), bool signersInOrder = default(bool), SignerStatusEnum? status = default(SignerStatusEnum?), string tag = default(string), string template = default(string), string templatepdf = default(string), string text = default(string), string user = default(string), Guid uuid = default(Guid))
        {
            this.Template = template;
            this.Templatepdf = templatepdf;
            this.Archived = archived;
            this.AutoArchive = autoArchive;
            this.CcEmails = ccEmails;
            this.Created = created;
            this.DoEmail = doEmail;
            this.DownloadFinal = downloadFinal;
            this.Group = group;
            this.Modified = modified;
            this.Name = name;
            this.Pdftext = pdftext;
            this.Redirect = redirect;
            this.ResourceUri = resourceUri;
            this.ReturnSignerLinks = returnSignerLinks;
            this.Signers = signers;
            this.SignersInOrder = signersInOrder;
            this.Status = status;
            this.Tag = tag;
            this.Template = template;
            this.Templatepdf = templatepdf;
            this.Text = text;
            this.User = user;
            this.Uuid = uuid;
        }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets AutoArchive
        /// </summary>
        [DataMember(Name="auto_archive", EmitDefaultValue=false)]
        public bool AutoArchive { get; set; }

        /// <summary>
        /// Gets or Sets CcEmails
        /// </summary>
        [DataMember(Name="cc_emails", EmitDefaultValue=false)]
        public string CcEmails { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets DoEmail
        /// </summary>
        [DataMember(Name="do_email", EmitDefaultValue=false)]
        public bool DoEmail { get; set; }

        /// <summary>
        /// Gets or Sets DownloadFinal
        /// </summary>
        [DataMember(Name="download_final", EmitDefaultValue=false)]
        public bool DownloadFinal { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Pdftext
        /// </summary>
        [DataMember(Name="pdftext", EmitDefaultValue=false)]
        public string Pdftext { get; set; }

        /// <summary>
        /// Gets or Sets Redirect
        /// </summary>
        [DataMember(Name="redirect", EmitDefaultValue=false)]
        public string Redirect { get; set; }

        /// <summary>
        /// Gets or Sets ResourceUri
        /// </summary>
        [DataMember(Name="resource_uri", EmitDefaultValue=false)]
        public string ResourceUri { get; set; }

        /// <summary>
        /// Gets or Sets ReturnSignerLinks
        /// </summary>
        [DataMember(Name="return_signer_links", EmitDefaultValue=false)]
        public bool ReturnSignerLinks { get; set; }

        /// <summary>
        /// nested arrays with signer details
        /// </summary>
        /// <value>nested arrays with signer details</value>
        [DataMember(Name="signers", EmitDefaultValue=false)]
        public List<List<string>> Signers { get; set; }

        /// <summary>
        /// Gets or Sets SignersInOrder
        /// </summary>
        [DataMember(Name="signers_in_order", EmitDefaultValue=false)]
        public bool SignersInOrder { get; set; }


        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=true)]
        public string Template { get; set; }

        /// <summary>
        /// Gets or Sets Templatepdf
        /// </summary>
        [DataMember(Name="templatepdf", EmitDefaultValue=true)]
        public string Templatepdf { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentListResponseObjects {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  AutoArchive: ").Append(AutoArchive).Append("\n");
            sb.Append("  CcEmails: ").Append(CcEmails).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DoEmail: ").Append(DoEmail).Append("\n");
            sb.Append("  DownloadFinal: ").Append(DownloadFinal).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Pdftext: ").Append(Pdftext).Append("\n");
            sb.Append("  Redirect: ").Append(Redirect).Append("\n");
            sb.Append("  ResourceUri: ").Append(ResourceUri).Append("\n");
            sb.Append("  ReturnSignerLinks: ").Append(ReturnSignerLinks).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  SignersInOrder: ").Append(SignersInOrder).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Templatepdf: ").Append(Templatepdf).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentListResponseObjects);
        }

        /// <summary>
        /// Returns true if DocumentListResponseObjects instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentListResponseObjects to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentListResponseObjects input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.AutoArchive == input.AutoArchive ||
                    (this.AutoArchive != null &&
                    this.AutoArchive.Equals(input.AutoArchive))
                ) && 
                (
                    this.CcEmails == input.CcEmails ||
                    (this.CcEmails != null &&
                    this.CcEmails.Equals(input.CcEmails))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DoEmail == input.DoEmail ||
                    (this.DoEmail != null &&
                    this.DoEmail.Equals(input.DoEmail))
                ) && 
                (
                    this.DownloadFinal == input.DownloadFinal ||
                    (this.DownloadFinal != null &&
                    this.DownloadFinal.Equals(input.DownloadFinal))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Pdftext == input.Pdftext ||
                    (this.Pdftext != null &&
                    this.Pdftext.Equals(input.Pdftext))
                ) && 
                (
                    this.Redirect == input.Redirect ||
                    (this.Redirect != null &&
                    this.Redirect.Equals(input.Redirect))
                ) && 
                (
                    this.ResourceUri == input.ResourceUri ||
                    (this.ResourceUri != null &&
                    this.ResourceUri.Equals(input.ResourceUri))
                ) && 
                (
                    this.ReturnSignerLinks == input.ReturnSignerLinks ||
                    (this.ReturnSignerLinks != null &&
                    this.ReturnSignerLinks.Equals(input.ReturnSignerLinks))
                ) && 
                (
                    this.Signers == input.Signers ||
                    this.Signers != null &&
                    input.Signers != null &&
                    this.Signers.SequenceEqual(input.Signers)
                ) && 
                (
                    this.SignersInOrder == input.SignersInOrder ||
                    (this.SignersInOrder != null &&
                    this.SignersInOrder.Equals(input.SignersInOrder))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Templatepdf == input.Templatepdf ||
                    (this.Templatepdf != null &&
                    this.Templatepdf.Equals(input.Templatepdf))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.AutoArchive != null)
                    hashCode = hashCode * 59 + this.AutoArchive.GetHashCode();
                if (this.CcEmails != null)
                    hashCode = hashCode * 59 + this.CcEmails.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DoEmail != null)
                    hashCode = hashCode * 59 + this.DoEmail.GetHashCode();
                if (this.DownloadFinal != null)
                    hashCode = hashCode * 59 + this.DownloadFinal.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Pdftext != null)
                    hashCode = hashCode * 59 + this.Pdftext.GetHashCode();
                if (this.Redirect != null)
                    hashCode = hashCode * 59 + this.Redirect.GetHashCode();
                if (this.ResourceUri != null)
                    hashCode = hashCode * 59 + this.ResourceUri.GetHashCode();
                if (this.ReturnSignerLinks != null)
                    hashCode = hashCode * 59 + this.ReturnSignerLinks.GetHashCode();
                if (this.Signers != null)
                    hashCode = hashCode * 59 + this.Signers.GetHashCode();
                if (this.SignersInOrder != null)
                    hashCode = hashCode * 59 + this.SignersInOrder.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.Templatepdf != null)
                    hashCode = hashCode * 59 + this.Templatepdf.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {


            // Group (string) pattern
            Regex regexGroup = new Regex(@"^\/api\/v1\/group\/[-\\w]{1,50}\/$", RegexOptions.CultureInvariant);
            if (false == regexGroup.Match(this.Group).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Group, must match a pattern of " + regexGroup, new [] { "Group" });
            }



            // Tag (string) pattern
            Regex regexTag = new Regex(@"^[-\\w\\[\\]\\:\\;\/\\.\\, _]{0,250}$", RegexOptions.CultureInvariant);
            if (false == regexTag.Match(this.Tag).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Tag, must match a pattern of " + regexTag, new [] { "Tag" });
            }



            // Template (string) pattern
            Regex regexTemplate = new Regex(@"^\/api\/v1\/template\/[-\\w]{1,60}\/$", RegexOptions.CultureInvariant);
            if (false == regexTemplate.Match(this.Template).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Template, must match a pattern of " + regexTemplate, new [] { "Template" });
            }



            // Templatepdf (string) pattern
            Regex regexTemplatepdf = new Regex(@"^\/api\/v1\/templatepdf\/[-\\w]{1,60}\/$", RegexOptions.CultureInvariant);
            if (false == regexTemplatepdf.Match(this.Templatepdf).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Templatepdf, must match a pattern of " + regexTemplatepdf, new [] { "Templatepdf" });
            }



            // User (string) pattern
            Regex regexUser = new Regex(@"^\/api\/v1\/user\/[-\\w]{1,60}\/$", RegexOptions.CultureInvariant);
            if (false == regexUser.Match(this.User).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for User, must match a pattern of " + regexUser, new [] { "User" });
            }

            yield break;
        }
    }

}
