/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DocumentResponseDetail
    /// </summary>
    [DataContract]
    public partial class DocumentResponseDetail :  IEquatable<DocumentResponseDetail>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public DocumentStatusEnum? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentResponseDetail" /> class.
        /// </summary>
        /// <param name="archived">archived.</param>
        /// <param name="autoArchive">Send document archive very soon after signing. (default to true).</param>
        /// <param name="ccEmails">who will be cc&#39;d  with sender on email notification when signed.</param>
        /// <param name="created">created.</param>
        /// <param name="doEmail">doEmail.</param>
        /// <param name="downloadFinal">Final PDF is available to download.</param>
        /// <param name="footer">HTML docs - text for footer if used.</param>
        /// <param name="footerHeight">HTMl docs - px height of footer if used.</param>
        /// <param name="group">Resource URI of group.</param>
        /// <param name="hasFields">hasFields.</param>
        /// <param name="hashValue">SHA256 checksum of final doc, use this to validate your final PDF download.</param>
        /// <param name="header">HTML docs - text for header if used.</param>
        /// <param name="headerHeight">HTMl docs - px height of header if used.</param>
        /// <param name="modified">modified.</param>
        /// <param name="name">name.</param>
        /// <param name="pdfPassword">PDF password if used and if save-able.</param>
        /// <param name="pdfPasswordType">how pdf password is retained.</param>
        /// <param name="pdftext">ignore this.</param>
        /// <param name="redirect">url for signer redirect after signing.</param>
        /// <param name="resourceUri">resourceUri.</param>
        /// <param name="returnSignerLinks">ignore.</param>
        /// <param name="signMouse">legacy.</param>
        /// <param name="signTime">signTime.</param>
        /// <param name="signType">legacy.</param>
        /// <param name="signUpload">legacy.</param>
        /// <param name="signaturePlacement">legacy.</param>
        /// <param name="signatureType">legacy - always 4.</param>
        /// <param name="signers">nested arrays with signer details.</param>
        /// <param name="signersInOrder">signersInOrder.</param>
        /// <param name="status">status.</param>
        /// <param name="tag">your reference.</param>
        /// <param name="template">template.</param>
        /// <param name="templatepdf">templatepdf.</param>
        /// <param name="text">text.</param>
        /// <param name="user">Resource URI of user.</param>
        /// <param name="uuid">Object ID alone.</param>
        public DocumentResponseDetail(bool archived = default(bool), bool autoArchive = true, string ccEmails = default(string), DateTime created = default(DateTime), bool doEmail = default(bool), bool downloadFinal = default(bool), string footer = default(string), int footerHeight = default(int), string group = default(string), bool hasFields = default(bool), string hashValue = default(string), string header = default(string), int headerHeight = default(int), DateTime modified = default(DateTime), string name = default(string), string pdfPassword = default(string), string pdfPasswordType = default(string), string pdftext = default(string), string redirect = default(string), string resourceUri = default(string), bool returnSignerLinks = default(bool), bool signMouse = default(bool), DateTime signTime = default(DateTime), bool signType = default(bool), bool signUpload = default(bool), int signaturePlacement = default(int), int signatureType = default(int), List<List<string>> signers = default(List<List<string>>), bool signersInOrder = default(bool), DocumentStatusEnum? status = default(DocumentStatusEnum?), string tag = default(string), string template = default(string), string templatepdf = default(string), string text = default(string), string user = default(string), Guid uuid = default(Guid))
        {
            this.Archived = archived;
            // use default value if no "autoArchive" provided
            if (autoArchive == null)
            {
                this.AutoArchive = true;
            }
            else
            {
                this.AutoArchive = autoArchive;
            }
            this.CcEmails = ccEmails;
            this.Created = created;
            this.DoEmail = doEmail;
            this.DownloadFinal = downloadFinal;
            this.Footer = footer;
            this.FooterHeight = footerHeight;
            this.Group = group;
            this.HasFields = hasFields;
            this.HashValue = hashValue;
            this.Header = header;
            this.HeaderHeight = headerHeight;
            this.Modified = modified;
            this.Name = name;
            this.PdfPassword = pdfPassword;
            this.PdfPasswordType = pdfPasswordType;
            this.Pdftext = pdftext;
            this.Redirect = redirect;
            this.ResourceUri = resourceUri;
            this.ReturnSignerLinks = returnSignerLinks;
            this.SignMouse = signMouse;
            this.SignTime = signTime;
            this.SignType = signType;
            this.SignUpload = signUpload;
            this.SignaturePlacement = signaturePlacement;
            this.SignatureType = signatureType;
            this.Signers = signers;
            this.SignersInOrder = signersInOrder;
            this.Status = status;
            this.Tag = tag;
            this.Template = template;
            this.Templatepdf = templatepdf;
            this.Text = text;
            this.User = user;
            this.Uuid = uuid;
        }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=false)]
        public bool Archived { get; set; }

        /// <summary>
        /// Send document archive very soon after signing.
        /// </summary>
        /// <value>Send document archive very soon after signing.</value>
        [DataMember(Name="auto_archive", EmitDefaultValue=false)]
        public bool AutoArchive { get; set; }

        /// <summary>
        /// who will be cc&#39;d  with sender on email notification when signed
        /// </summary>
        /// <value>who will be cc&#39;d  with sender on email notification when signed</value>
        [DataMember(Name="cc_emails", EmitDefaultValue=false)]
        public string CcEmails { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets DoEmail
        /// </summary>
        [DataMember(Name="do_email", EmitDefaultValue=false)]
        public bool DoEmail { get; set; }

        /// <summary>
        /// Final PDF is available to download
        /// </summary>
        /// <value>Final PDF is available to download</value>
        [DataMember(Name="download_final", EmitDefaultValue=false)]
        public bool DownloadFinal { get; set; }

        /// <summary>
        /// HTML docs - text for footer if used
        /// </summary>
        /// <value>HTML docs - text for footer if used</value>
        [DataMember(Name="footer", EmitDefaultValue=false)]
        public string Footer { get; set; }

        /// <summary>
        /// HTMl docs - px height of footer if used
        /// </summary>
        /// <value>HTMl docs - px height of footer if used</value>
        [DataMember(Name="footer_height", EmitDefaultValue=false)]
        public int? FooterHeight { get; set; }

        /// <summary>
        /// Resource URI of group
        /// </summary>
        /// <value>Resource URI of group</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets HasFields
        /// </summary>
        [DataMember(Name="has_fields", EmitDefaultValue=false)]
        public bool HasFields { get; set; }

        /// <summary>
        /// SHA256 checksum of final doc, use this to validate your final PDF download
        /// </summary>
        /// <value>SHA256 checksum of final doc, use this to validate your final PDF download</value>
        [DataMember(Name="hash_value", EmitDefaultValue=false)]
        public string HashValue { get; set; }

        /// <summary>
        /// HTML docs - text for header if used
        /// </summary>
        /// <value>HTML docs - text for header if used</value>
        [DataMember(Name="header", EmitDefaultValue=false)]
        public string Header { get; set; }

        /// <summary>
        /// HTMl docs - px height of header if used
        /// </summary>
        /// <value>HTMl docs - px height of header if used</value>
        [DataMember(Name="header_height", EmitDefaultValue=false)]
        public int HeaderHeight { get; set; }

        /// <summary>
        /// Gets or Sets Modified
        /// </summary>
        [DataMember(Name="modified", EmitDefaultValue=false)]
        public DateTime Modified { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// PDF password if used and if save-able
        /// </summary>
        /// <value>PDF password if used and if save-able</value>
        [DataMember(Name="pdf_password", EmitDefaultValue=false)]
        public string PdfPassword { get; set; }

        /// <summary>
        /// how pdf password is retained
        /// </summary>
        /// <value>how pdf password is retained</value>
        [DataMember(Name="pdf_password_type", EmitDefaultValue=false)]
        public string PdfPasswordType { get; set; }

        /// <summary>
        /// ignore this
        /// </summary>
        /// <value>ignore this</value>
        [DataMember(Name="pdftext", EmitDefaultValue=false)]
        public string Pdftext { get; set; }

        /// <summary>
        /// url for signer redirect after signing
        /// </summary>
        /// <value>url for signer redirect after signing</value>
        [DataMember(Name="redirect", EmitDefaultValue=false)]
        public string Redirect { get; set; }

        /// <summary>
        /// Gets or Sets ResourceUri
        /// </summary>
        [DataMember(Name="resource_uri", EmitDefaultValue=false)]
        public string ResourceUri { get; set; }

        /// <summary>
        /// ignore
        /// </summary>
        /// <value>ignore</value>
        [DataMember(Name="return_signer_links", EmitDefaultValue=false)]
        public bool ReturnSignerLinks { get; set; }

        /// <summary>
        /// legacy
        /// </summary>
        /// <value>legacy</value>
        [DataMember(Name="sign_mouse", EmitDefaultValue=false)]
        public bool SignMouse { get; set; }

        /// <summary>
        /// Gets or Sets SignTime
        /// </summary>
        [DataMember(Name="sign_time", EmitDefaultValue=false)]
        public DateTime SignTime { get; set; }

        /// <summary>
        /// legacy
        /// </summary>
        /// <value>legacy</value>
        [DataMember(Name="sign_type", EmitDefaultValue=false)]
        public bool SignType { get; set; }

        /// <summary>
        /// legacy
        /// </summary>
        /// <value>legacy</value>
        [DataMember(Name="sign_upload", EmitDefaultValue=false)]
        public bool SignUpload { get; set; }

        /// <summary>
        /// legacy
        /// </summary>
        /// <value>legacy</value>
        [DataMember(Name="signature_placement", EmitDefaultValue=false)]
        public int SignaturePlacement { get; set; }

        /// <summary>
        /// legacy - always 4
        /// </summary>
        /// <value>legacy - always 4</value>
        [DataMember(Name="signature_type", EmitDefaultValue=false)]
        public int SignatureType { get; set; }

        /// <summary>
        /// nested arrays with signer details
        /// </summary>
        /// <value>nested arrays with signer details</value>
        [DataMember(Name="signers", EmitDefaultValue=false)]
        public List<List<string>> Signers { get; set; }

        /// <summary>
        /// Gets or Sets SignersInOrder
        /// </summary>
        [DataMember(Name="signers_in_order", EmitDefaultValue=false)]
        public bool SignersInOrder { get; set; }


        /// <summary>
        /// your reference
        /// </summary>
        /// <value>your reference</value>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets Template
        /// </summary>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public string Template { get; set; }

        /// <summary>
        /// Gets or Sets Templatepdf
        /// </summary>
        [DataMember(Name="templatepdf", EmitDefaultValue=false)]
        public string Templatepdf { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Resource URI of user
        /// </summary>
        /// <value>Resource URI of user</value>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public string User { get; set; }

        /// <summary>
        /// Object ID alone
        /// </summary>
        /// <value>Object ID alone</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DocumentResponseDetail {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  AutoArchive: ").Append(AutoArchive).Append("\n");
            sb.Append("  CcEmails: ").Append(CcEmails).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DoEmail: ").Append(DoEmail).Append("\n");
            sb.Append("  DownloadFinal: ").Append(DownloadFinal).Append("\n");
            sb.Append("  Footer: ").Append(Footer).Append("\n");
            sb.Append("  FooterHeight: ").Append(FooterHeight).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  HasFields: ").Append(HasFields).Append("\n");
            sb.Append("  HashValue: ").Append(HashValue).Append("\n");
            sb.Append("  Header: ").Append(Header).Append("\n");
            sb.Append("  HeaderHeight: ").Append(HeaderHeight).Append("\n");
            sb.Append("  Modified: ").Append(Modified).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PdfPassword: ").Append(PdfPassword).Append("\n");
            sb.Append("  PdfPasswordType: ").Append(PdfPasswordType).Append("\n");
            sb.Append("  Pdftext: ").Append(Pdftext).Append("\n");
            sb.Append("  Redirect: ").Append(Redirect).Append("\n");
            sb.Append("  ResourceUri: ").Append(ResourceUri).Append("\n");
            sb.Append("  ReturnSignerLinks: ").Append(ReturnSignerLinks).Append("\n");
            sb.Append("  SignMouse: ").Append(SignMouse).Append("\n");
            sb.Append("  SignTime: ").Append(SignTime).Append("\n");
            sb.Append("  SignType: ").Append(SignType).Append("\n");
            sb.Append("  SignUpload: ").Append(SignUpload).Append("\n");
            sb.Append("  SignaturePlacement: ").Append(SignaturePlacement).Append("\n");
            sb.Append("  SignatureType: ").Append(SignatureType).Append("\n");
            sb.Append("  Signers: ").Append(Signers).Append("\n");
            sb.Append("  SignersInOrder: ").Append(SignersInOrder).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  Templatepdf: ").Append(Templatepdf).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DocumentResponseDetail);
        }

        /// <summary>
        /// Returns true if DocumentResponseDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DocumentResponseDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DocumentResponseDetail input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Archived == input.Archived ||
                    (this.Archived != null &&
                    this.Archived.Equals(input.Archived))
                ) && 
                (
                    this.AutoArchive == input.AutoArchive ||
                    (this.AutoArchive != null &&
                    this.AutoArchive.Equals(input.AutoArchive))
                ) && 
                (
                    this.CcEmails == input.CcEmails ||
                    (this.CcEmails != null &&
                    this.CcEmails.Equals(input.CcEmails))
                ) && 
                (
                    this.Created == input.Created ||
                    (this.Created != null &&
                    this.Created.Equals(input.Created))
                ) && 
                (
                    this.DoEmail == input.DoEmail ||
                    (this.DoEmail != null &&
                    this.DoEmail.Equals(input.DoEmail))
                ) && 
                (
                    this.DownloadFinal == input.DownloadFinal ||
                    (this.DownloadFinal != null &&
                    this.DownloadFinal.Equals(input.DownloadFinal))
                ) && 
                (
                    this.Footer == input.Footer ||
                    (this.Footer != null &&
                    this.Footer.Equals(input.Footer))
                ) && 
                (
                    this.FooterHeight == input.FooterHeight ||
                    (this.FooterHeight != null &&
                    this.FooterHeight.Equals(input.FooterHeight))
                ) && 
                (
                    this.Group == input.Group ||
                    (this.Group != null &&
                    this.Group.Equals(input.Group))
                ) && 
                (
                    this.HasFields == input.HasFields ||
                    (this.HasFields != null &&
                    this.HasFields.Equals(input.HasFields))
                ) && 
                (
                    this.HashValue == input.HashValue ||
                    (this.HashValue != null &&
                    this.HashValue.Equals(input.HashValue))
                ) && 
                (
                    this.Header == input.Header ||
                    (this.Header != null &&
                    this.Header.Equals(input.Header))
                ) && 
                (
                    this.HeaderHeight == input.HeaderHeight ||
                    (this.HeaderHeight != null &&
                    this.HeaderHeight.Equals(input.HeaderHeight))
                ) && 
                (
                    this.Modified == input.Modified ||
                    (this.Modified != null &&
                    this.Modified.Equals(input.Modified))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PdfPassword == input.PdfPassword ||
                    (this.PdfPassword != null &&
                    this.PdfPassword.Equals(input.PdfPassword))
                ) && 
                (
                    this.PdfPasswordType == input.PdfPasswordType ||
                    (this.PdfPasswordType != null &&
                    this.PdfPasswordType.Equals(input.PdfPasswordType))
                ) && 
                (
                    this.Pdftext == input.Pdftext ||
                    (this.Pdftext != null &&
                    this.Pdftext.Equals(input.Pdftext))
                ) && 
                (
                    this.Redirect == input.Redirect ||
                    (this.Redirect != null &&
                    this.Redirect.Equals(input.Redirect))
                ) && 
                (
                    this.ResourceUri == input.ResourceUri ||
                    (this.ResourceUri != null &&
                    this.ResourceUri.Equals(input.ResourceUri))
                ) && 
                (
                    this.ReturnSignerLinks == input.ReturnSignerLinks ||
                    (this.ReturnSignerLinks != null &&
                    this.ReturnSignerLinks.Equals(input.ReturnSignerLinks))
                ) && 
                (
                    this.SignMouse == input.SignMouse ||
                    (this.SignMouse != null &&
                    this.SignMouse.Equals(input.SignMouse))
                ) && 
                (
                    this.SignTime == input.SignTime ||
                    (this.SignTime != null &&
                    this.SignTime.Equals(input.SignTime))
                ) && 
                (
                    this.SignType == input.SignType ||
                    (this.SignType != null &&
                    this.SignType.Equals(input.SignType))
                ) && 
                (
                    this.SignUpload == input.SignUpload ||
                    (this.SignUpload != null &&
                    this.SignUpload.Equals(input.SignUpload))
                ) && 
                (
                    this.SignaturePlacement == input.SignaturePlacement ||
                    (this.SignaturePlacement != null &&
                    this.SignaturePlacement.Equals(input.SignaturePlacement))
                ) && 
                (
                    this.SignatureType == input.SignatureType ||
                    (this.SignatureType != null &&
                    this.SignatureType.Equals(input.SignatureType))
                ) && 
                (
                    this.Signers == input.Signers ||
                    this.Signers != null &&
                    input.Signers != null &&
                    this.Signers.SequenceEqual(input.Signers)
                ) && 
                (
                    this.SignersInOrder == input.SignersInOrder ||
                    (this.SignersInOrder != null &&
                    this.SignersInOrder.Equals(input.SignersInOrder))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.Tag == input.Tag ||
                    (this.Tag != null &&
                    this.Tag.Equals(input.Tag))
                ) && 
                (
                    this.Template == input.Template ||
                    (this.Template != null &&
                    this.Template.Equals(input.Template))
                ) && 
                (
                    this.Templatepdf == input.Templatepdf ||
                    (this.Templatepdf != null &&
                    this.Templatepdf.Equals(input.Templatepdf))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.User == input.User ||
                    (this.User != null &&
                    this.User.Equals(input.User))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Archived != null)
                    hashCode = hashCode * 59 + this.Archived.GetHashCode();
                if (this.AutoArchive != null)
                    hashCode = hashCode * 59 + this.AutoArchive.GetHashCode();
                if (this.CcEmails != null)
                    hashCode = hashCode * 59 + this.CcEmails.GetHashCode();
                if (this.Created != null)
                    hashCode = hashCode * 59 + this.Created.GetHashCode();
                if (this.DoEmail != null)
                    hashCode = hashCode * 59 + this.DoEmail.GetHashCode();
                if (this.DownloadFinal != null)
                    hashCode = hashCode * 59 + this.DownloadFinal.GetHashCode();
                if (this.Footer != null)
                    hashCode = hashCode * 59 + this.Footer.GetHashCode();
                if (this.FooterHeight != null)
                    hashCode = hashCode * 59 + this.FooterHeight.GetHashCode();
                if (this.Group != null)
                    hashCode = hashCode * 59 + this.Group.GetHashCode();
                if (this.HasFields != null)
                    hashCode = hashCode * 59 + this.HasFields.GetHashCode();
                if (this.HashValue != null)
                    hashCode = hashCode * 59 + this.HashValue.GetHashCode();
                if (this.Header != null)
                    hashCode = hashCode * 59 + this.Header.GetHashCode();
                if (this.HeaderHeight != null)
                    hashCode = hashCode * 59 + this.HeaderHeight.GetHashCode();
                if (this.Modified != null)
                    hashCode = hashCode * 59 + this.Modified.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.PdfPassword != null)
                    hashCode = hashCode * 59 + this.PdfPassword.GetHashCode();
                if (this.PdfPasswordType != null)
                    hashCode = hashCode * 59 + this.PdfPasswordType.GetHashCode();
                if (this.Pdftext != null)
                    hashCode = hashCode * 59 + this.Pdftext.GetHashCode();
                if (this.Redirect != null)
                    hashCode = hashCode * 59 + this.Redirect.GetHashCode();
                if (this.ResourceUri != null)
                    hashCode = hashCode * 59 + this.ResourceUri.GetHashCode();
                if (this.ReturnSignerLinks != null)
                    hashCode = hashCode * 59 + this.ReturnSignerLinks.GetHashCode();
                if (this.SignMouse != null)
                    hashCode = hashCode * 59 + this.SignMouse.GetHashCode();
                if (this.SignTime != null)
                    hashCode = hashCode * 59 + this.SignTime.GetHashCode();
                if (this.SignType != null)
                    hashCode = hashCode * 59 + this.SignType.GetHashCode();
                if (this.SignUpload != null)
                    hashCode = hashCode * 59 + this.SignUpload.GetHashCode();
                if (this.SignaturePlacement != null)
                    hashCode = hashCode * 59 + this.SignaturePlacement.GetHashCode();
                if (this.SignatureType != null)
                    hashCode = hashCode * 59 + this.SignatureType.GetHashCode();
                if (this.Signers != null)
                    hashCode = hashCode * 59 + this.Signers.GetHashCode();
                if (this.SignersInOrder != null)
                    hashCode = hashCode * 59 + this.SignersInOrder.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.Tag != null)
                    hashCode = hashCode * 59 + this.Tag.GetHashCode();
                if (this.Template != null)
                    hashCode = hashCode * 59 + this.Template.GetHashCode();
                if (this.Templatepdf != null)
                    hashCode = hashCode * 59 + this.Templatepdf.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.User != null)
                    hashCode = hashCode * 59 + this.User.GetHashCode();
                if (this.Uuid != null)
                    hashCode = hashCode * 59 + this.Uuid.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
