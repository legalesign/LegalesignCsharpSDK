/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITemplatepdfApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>TemplatePdfResponse</returns>
        TemplatePdfResponse GetPdfTemplate (Guid pdfId);

        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>ApiResponse of TemplatePdfResponse</returns>
        ApiResponse<TemplatePdfResponse> GetPdfTemplateWithHttpInfo (Guid pdfId);
        /// <summary>
        /// Get PDF template fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>TemplatePdfFieldsList</returns>
        TemplatePdfFieldsList GetPdfTemplateFields (Guid pdfId);

        /// <summary>
        /// Get PDF template fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>ApiResponse of TemplatePdfFieldsList</returns>
        ApiResponse<TemplatePdfFieldsList> GetPdfTemplateFieldsWithHttpInfo (Guid pdfId);
        /// <summary>
        /// Get PDF templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <returns>TemplatePdfListResponse</returns>
        TemplatePdfListResponse GetPdfTemplates (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?));

        /// <summary>
        /// Get PDF templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <returns>ApiResponse of TemplatePdfListResponse</returns>
        ApiResponse<TemplatePdfListResponse> GetPdfTemplatesWithHttpInfo (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?));
        /// <summary>
        /// Create PDF template
        /// </summary>
        /// <remarks>
        /// Upload a PDF document you want to send to be signed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <returns></returns>
        void PostPdfTemplate (TemplatePdfFieldPost templatePdfFieldPost);

        /// <summary>
        /// Create PDF template
        /// </summary>
        /// <remarks>
        /// Upload a PDF document you want to send to be signed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPdfTemplateWithHttpInfo (TemplatePdfFieldPost templatePdfFieldPost);
        /// <summary>
        /// Create PDF template fields
        /// </summary>
        /// <remarks>
        /// Replace existing pdf fields with new ones
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <returns></returns>
        void PostPdfTemplateFields (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost);

        /// <summary>
        /// Create PDF template fields
        /// </summary>
        /// <remarks>
        /// Replace existing pdf fields with new ones
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPdfTemplateFieldsWithHttpInfo (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost);
        /// <summary>
        /// Convert text tags
        /// </summary>
        /// <remarks>
        /// Convert any text tags in the PDF into fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <returns></returns>
        void PostPdfTemplateTags (string pdfId);

        /// <summary>
        /// Convert text tags
        /// </summary>
        /// <remarks>
        /// Convert any text tags in the PDF into fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostPdfTemplateTagsWithHttpInfo (string pdfId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplatePdfResponse</returns>
        System.Threading.Tasks.Task<TemplatePdfResponse> GetPdfTemplateAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PDF template
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplatePdfResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePdfResponse>> GetPdfTemplateWithHttpInfoAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get PDF template fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplatePdfFieldsList</returns>
        System.Threading.Tasks.Task<TemplatePdfFieldsList> GetPdfTemplateFieldsAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PDF template fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplatePdfFieldsList)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePdfFieldsList>> GetPdfTemplateFieldsWithHttpInfoAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get PDF templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplatePdfListResponse</returns>
        System.Threading.Tasks.Task<TemplatePdfListResponse> GetPdfTemplatesAsync (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get PDF templates
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplatePdfListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TemplatePdfListResponse>> GetPdfTemplatesWithHttpInfoAsync (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create PDF template
        /// </summary>
        /// <remarks>
        /// Upload a PDF document you want to send to be signed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostPdfTemplateAsync (TemplatePdfFieldPost templatePdfFieldPost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create PDF template
        /// </summary>
        /// <remarks>
        /// Upload a PDF document you want to send to be signed
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostPdfTemplateWithHttpInfoAsync (TemplatePdfFieldPost templatePdfFieldPost, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create PDF template fields
        /// </summary>
        /// <remarks>
        /// Replace existing pdf fields with new ones
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostPdfTemplateFieldsAsync (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create PDF template fields
        /// </summary>
        /// <remarks>
        /// Replace existing pdf fields with new ones
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostPdfTemplateFieldsWithHttpInfoAsync (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Convert text tags
        /// </summary>
        /// <remarks>
        /// Convert any text tags in the PDF into fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostPdfTemplateTagsAsync (string pdfId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Convert text tags
        /// </summary>
        /// <remarks>
        /// Convert any text tags in the PDF into fields
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostPdfTemplateTagsWithHttpInfoAsync (string pdfId, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TemplatepdfApi : ITemplatepdfApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatepdfApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TemplatepdfApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatepdfApi"/> class
        /// </summary>
        /// <returns></returns>
        public TemplatepdfApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemplatepdfApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TemplatepdfApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get PDF template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>TemplatePdfResponse</returns>
        public TemplatePdfResponse GetPdfTemplate (Guid pdfId)
        {
             ApiResponse<TemplatePdfResponse> localVarResponse = GetPdfTemplateWithHttpInfo(pdfId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>ApiResponse of TemplatePdfResponse</returns>
        public ApiResponse<TemplatePdfResponse> GetPdfTemplateWithHttpInfo (Guid pdfId)
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->GetPdfTemplate");

            var localVarPath = "/templatepdf/{pdfId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePdfResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplatePdfResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePdfResponse)));
        }

        /// <summary>
        /// Get PDF template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplatePdfResponse</returns>
        public async System.Threading.Tasks.Task<TemplatePdfResponse> GetPdfTemplateAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TemplatePdfResponse> localVarResponse = await GetPdfTemplateWithHttpInfoAsync(pdfId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PDF template 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplatePdfResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatePdfResponse>> GetPdfTemplateWithHttpInfoAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->GetPdfTemplate");

            var localVarPath = "/templatepdf/{pdfId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePdfResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplatePdfResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePdfResponse)));
        }

        /// <summary>
        /// Get PDF template fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>TemplatePdfFieldsList</returns>
        public TemplatePdfFieldsList GetPdfTemplateFields (Guid pdfId)
        {
             ApiResponse<TemplatePdfFieldsList> localVarResponse = GetPdfTemplateFieldsWithHttpInfo(pdfId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF template fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <returns>ApiResponse of TemplatePdfFieldsList</returns>
        public ApiResponse<TemplatePdfFieldsList> GetPdfTemplateFieldsWithHttpInfo (Guid pdfId)
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->GetPdfTemplateFields");

            var localVarPath = "/templatepdf/{pdfId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfTemplateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePdfFieldsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplatePdfFieldsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePdfFieldsList)));
        }

        /// <summary>
        /// Get PDF template fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplatePdfFieldsList</returns>
        public async System.Threading.Tasks.Task<TemplatePdfFieldsList> GetPdfTemplateFieldsAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TemplatePdfFieldsList> localVarResponse = await GetPdfTemplateFieldsWithHttpInfoAsync(pdfId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PDF template fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplatePdfFieldsList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatePdfFieldsList>> GetPdfTemplateFieldsWithHttpInfoAsync (Guid pdfId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->GetPdfTemplateFields");

            var localVarPath = "/templatepdf/{pdfId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfTemplateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePdfFieldsList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplatePdfFieldsList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePdfFieldsList)));
        }

        /// <summary>
        /// Get PDF templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <returns>TemplatePdfListResponse</returns>
        public TemplatePdfListResponse GetPdfTemplates (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?))
        {
             ApiResponse<TemplatePdfListResponse> localVarResponse = GetPdfTemplatesWithHttpInfo(archive, group, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get PDF templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <returns>ApiResponse of TemplatePdfListResponse</returns>
        public ApiResponse<TemplatePdfListResponse> GetPdfTemplatesWithHttpInfo (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?))
        {

            var localVarPath = "/templatepdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archive", archive)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePdfListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplatePdfListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePdfListResponse)));
        }

        /// <summary>
        /// Get PDF templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of TemplatePdfListResponse</returns>
        public async System.Threading.Tasks.Task<TemplatePdfListResponse> GetPdfTemplatesAsync (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<TemplatePdfListResponse> localVarResponse = await GetPdfTemplatesWithHttpInfoAsync(archive, group, limit, offset, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get PDF templates 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archive"> (optional, default to &quot;false&quot;)</param>
        /// <param name="group">can be full resource_uri or only id (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (TemplatePdfListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TemplatePdfListResponse>> GetPdfTemplatesWithHttpInfoAsync (string archive = default(string), string group = default(string), int? limit = default(int?), int? offset = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/templatepdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archive != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archive", archive)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetPdfTemplates", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TemplatePdfListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (TemplatePdfListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(TemplatePdfListResponse)));
        }

        /// <summary>
        /// Create PDF template Upload a PDF document you want to send to be signed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <returns></returns>
        public void PostPdfTemplate (TemplatePdfFieldPost templatePdfFieldPost)
        {
             PostPdfTemplateWithHttpInfo(templatePdfFieldPost);
        }

        /// <summary>
        /// Create PDF template Upload a PDF document you want to send to be signed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostPdfTemplateWithHttpInfo (TemplatePdfFieldPost templatePdfFieldPost)
        {
            // verify the required parameter 'templatePdfFieldPost' is set
            if (templatePdfFieldPost == null)
                throw new ApiException(400, "Missing required parameter 'templatePdfFieldPost' when calling TemplatepdfApi->PostPdfTemplate");

            var localVarPath = "/templatepdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templatePdfFieldPost != null && templatePdfFieldPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(templatePdfFieldPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templatePdfFieldPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create PDF template Upload a PDF document you want to send to be signed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostPdfTemplateAsync (TemplatePdfFieldPost templatePdfFieldPost, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostPdfTemplateWithHttpInfoAsync(templatePdfFieldPost, cancellationToken);

        }

        /// <summary>
        /// Create PDF template Upload a PDF document you want to send to be signed
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="templatePdfFieldPost">Data for PDF upload</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostPdfTemplateWithHttpInfoAsync (TemplatePdfFieldPost templatePdfFieldPost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'templatePdfFieldPost' is set
            if (templatePdfFieldPost == null)
                throw new ApiException(400, "Missing required parameter 'templatePdfFieldPost' when calling TemplatepdfApi->PostPdfTemplate");

            var localVarPath = "/templatepdf";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (templatePdfFieldPost != null && templatePdfFieldPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(templatePdfFieldPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = templatePdfFieldPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfTemplate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create PDF template fields Replace existing pdf fields with new ones
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <returns></returns>
        public void PostPdfTemplateFields (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost)
        {
             PostPdfTemplateFieldsWithHttpInfo(pdfId, pdfFieldsPost);
        }

        /// <summary>
        /// Create PDF template fields Replace existing pdf fields with new ones
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostPdfTemplateFieldsWithHttpInfo (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost)
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->PostPdfTemplateFields");
            // verify the required parameter 'pdfFieldsPost' is set
            if (pdfFieldsPost == null)
                throw new ApiException(400, "Missing required parameter 'pdfFieldsPost' when calling TemplatepdfApi->PostPdfTemplateFields");

            var localVarPath = "/templatepdf/{pdfId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter
            if (pdfFieldsPost != null && pdfFieldsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfFieldsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfFieldsPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfTemplateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Create PDF template fields Replace existing pdf fields with new ones
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostPdfTemplateFieldsAsync (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostPdfTemplateFieldsWithHttpInfoAsync(pdfId, pdfFieldsPost, cancellationToken);

        }

        /// <summary>
        /// Create PDF template fields Replace existing pdf fields with new ones
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId">uploaded PDF id</param>
        /// <param name="pdfFieldsPost">Replace PDF fields on a PDF template.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostPdfTemplateFieldsWithHttpInfoAsync (Guid pdfId, List<PdfFieldsPost> pdfFieldsPost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->PostPdfTemplateFields");
            // verify the required parameter 'pdfFieldsPost' is set
            if (pdfFieldsPost == null)
                throw new ApiException(400, "Missing required parameter 'pdfFieldsPost' when calling TemplatepdfApi->PostPdfTemplateFields");

            var localVarPath = "/templatepdf/{pdfId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter
            if (pdfFieldsPost != null && pdfFieldsPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(pdfFieldsPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = pdfFieldsPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfTemplateFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert text tags Convert any text tags in the PDF into fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <returns></returns>
        public void PostPdfTemplateTags (string pdfId)
        {
             PostPdfTemplateTagsWithHttpInfo(pdfId);
        }

        /// <summary>
        /// Convert text tags Convert any text tags in the PDF into fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostPdfTemplateTagsWithHttpInfo (string pdfId)
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->PostPdfTemplateTags");

            var localVarPath = "/templatepdf/{pdfId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfTemplateTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Convert text tags Convert any text tags in the PDF into fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostPdfTemplateTagsAsync (string pdfId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostPdfTemplateTagsWithHttpInfoAsync(pdfId, cancellationToken);

        }

        /// <summary>
        /// Convert text tags Convert any text tags in the PDF into fields
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pdfId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostPdfTemplateTagsWithHttpInfoAsync (string pdfId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'pdfId' is set
            if (pdfId == null)
                throw new ApiException(400, "Missing required parameter 'pdfId' when calling TemplatepdfApi->PostPdfTemplateTags");

            var localVarPath = "/templatepdf/{pdfId}/tags";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pdfId != null) localVarPathParams.Add("pdfId", this.Configuration.ApiClient.ParameterToString(pdfId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfTemplateTags", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
