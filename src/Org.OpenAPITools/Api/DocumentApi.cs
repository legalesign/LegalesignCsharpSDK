/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Void/archive signing document
        /// </summary>
        /// <remarks>
        /// Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns></returns>
        void ArchiveDocument (Guid docId);

        /// <summary>
        /// Void/archive signing document
        /// </summary>
        /// <remarks>
        /// Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ArchiveDocumentWithHttpInfo (Guid docId);
        /// <summary>
        /// Permanently delete signing document
        /// </summary>
        /// <remarks>
        /// Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns></returns>
        void DeleteDocument (Guid docId);

        /// <summary>
        /// Permanently delete signing document
        /// </summary>
        /// <remarks>
        /// Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteDocumentWithHttpInfo (Guid docId);
        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>DocumentResponseDetail</returns>
        DocumentResponseDetail GetDocument (Guid docId);

        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of DocumentResponseDetail</returns>
        ApiResponse<DocumentResponseDetail> GetDocumentWithHttpInfo (Guid docId);
        /// <summary>
        /// Get document fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        List<InlineResponse200> GetDocumentFields (Guid docId);

        /// <summary>
        /// Get document fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        ApiResponse<List<InlineResponse200>> GetDocumentFieldsWithHttpInfo (Guid docId);
        /// <summary>
        /// Location to download PDF
        /// </summary>
        /// <remarks>
        /// Get the PDF for a signing document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream GetDocumentPdf (string docId);

        /// <summary>
        /// Location to download PDF
        /// </summary>
        /// <remarks>
        /// Get the PDF for a signing document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> GetDocumentPdfWithHttpInfo (string docId);
        /// <summary>
        /// Get signing documents
        /// </summary>
        /// <remarks>
        /// List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <returns>DocumentListResponse</returns>
        DocumentListResponse GetDocuments (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string));

        /// <summary>
        /// Get signing documents
        /// </summary>
        /// <remarks>
        /// List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <returns>ApiResponse of DocumentListResponse</returns>
        ApiResponse<DocumentListResponse> GetDocumentsWithHttpInfo (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string));
        /// <summary>
        /// Get signing document status
        /// </summary>
        /// <remarks>
        /// Faster short query for a document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <returns>StatusResponse</returns>
        StatusResponse GetStatus (string docId);

        /// <summary>
        /// Get signing document status
        /// </summary>
        /// <remarks>
        /// Faster short query for a document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        ApiResponse<StatusResponse> GetStatusWithHttpInfo (string docId);
        /// <summary>
        /// Get signing documents status
        /// </summary>
        /// <remarks>
        /// Shortened faster query for status of signing documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <returns>StatusListResponse</returns>
        StatusListResponse GetStatuses (string filter = default(string), int? offset = default(int?), int? limit = default(int?));

        /// <summary>
        /// Get signing documents status
        /// </summary>
        /// <remarks>
        /// Shortened faster query for status of signing documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <returns>ApiResponse of StatusListResponse</returns>
        ApiResponse<StatusListResponse> GetStatusesWithHttpInfo (string filter = default(string), int? offset = default(int?), int? limit = default(int?));
        /// <summary>
        /// Create signing document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 PostDocument (DocumentPost documentPost);

        /// <summary>
        /// Create signing document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> PostDocumentWithHttpInfo (DocumentPost documentPost);
        /// <summary>
        /// text/html document as pdf preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <returns>System.IO.Stream</returns>
        System.IO.Stream PostPdfPreview (DocumentPdfPreview documentPdfPreview);

        /// <summary>
        /// text/html document as pdf preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        ApiResponse<System.IO.Stream> PostPdfPreviewWithHttpInfo (DocumentPdfPreview documentPdfPreview);
        /// <summary>
        /// Preview text document signing page
        /// </summary>
        /// <remarks>
        /// Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <returns></returns>
        void PreviewDocumentSigning (HTMLSigningPreviewPost hTMLSigningPreviewPost);

        /// <summary>
        /// Preview text document signing page
        /// </summary>
        /// <remarks>
        /// Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PreviewDocumentSigningWithHttpInfo (HTMLSigningPreviewPost hTMLSigningPreviewPost);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Void/archive signing document
        /// </summary>
        /// <remarks>
        /// Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ArchiveDocumentAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Void/archive signing document
        /// </summary>
        /// <remarks>
        /// Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveDocumentWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Permanently delete signing document
        /// </summary>
        /// <remarks>
        /// Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteDocumentAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Permanently delete signing document
        /// </summary>
        /// <remarks>
        /// Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentResponseDetail</returns>
        System.Threading.Tasks.Task<DocumentResponseDetail> GetDocumentAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentResponseDetail)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentResponseDetail>> GetDocumentWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get document fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse200>> GetDocumentFieldsAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get document fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> GetDocumentFieldsWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Location to download PDF
        /// </summary>
        /// <remarks>
        /// Get the PDF for a signing document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> GetDocumentPdfAsync (string docId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Location to download PDF
        /// </summary>
        /// <remarks>
        /// Get the PDF for a signing document
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentPdfWithHttpInfoAsync (string docId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get signing documents
        /// </summary>
        /// <remarks>
        /// List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentListResponse</returns>
        System.Threading.Tasks.Task<DocumentListResponse> GetDocumentsAsync (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signing documents
        /// </summary>
        /// <remarks>
        /// List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DocumentListResponse>> GetDocumentsWithHttpInfoAsync (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get signing document status
        /// </summary>
        /// <remarks>
        /// Faster short query for a document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StatusResponse</returns>
        System.Threading.Tasks.Task<StatusResponse> GetStatusAsync (string docId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signing document status
        /// </summary>
        /// <remarks>
        /// Faster short query for a document status
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusResponse>> GetStatusWithHttpInfoAsync (string docId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get signing documents status
        /// </summary>
        /// <remarks>
        /// Shortened faster query for status of signing documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StatusListResponse</returns>
        System.Threading.Tasks.Task<StatusListResponse> GetStatusesAsync (string filter = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signing documents status
        /// </summary>
        /// <remarks>
        /// Shortened faster query for status of signing documents
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StatusListResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusListResponse>> GetStatusesWithHttpInfoAsync (string filter = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Create signing document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> PostDocumentAsync (DocumentPost documentPost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Create signing document
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> PostDocumentWithHttpInfoAsync (DocumentPost documentPost, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// text/html document as pdf preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        System.Threading.Tasks.Task<System.IO.Stream> PostPdfPreviewAsync (DocumentPdfPreview documentPdfPreview, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// text/html document as pdf preview
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostPdfPreviewWithHttpInfoAsync (DocumentPdfPreview documentPdfPreview, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Preview text document signing page
        /// </summary>
        /// <remarks>
        /// Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PreviewDocumentSigningAsync (HTMLSigningPreviewPost hTMLSigningPreviewPost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Preview text document signing page
        /// </summary>
        /// <remarks>
        /// Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PreviewDocumentSigningWithHttpInfoAsync (HTMLSigningPreviewPost hTMLSigningPreviewPost, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentApi : IDocumentApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// </summary>
        /// <returns></returns>
        public DocumentApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Void/archive signing document Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns></returns>
        public void ArchiveDocument (Guid docId)
        {
             ArchiveDocumentWithHttpInfo(docId);
        }

        /// <summary>
        /// Void/archive signing document Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> ArchiveDocumentWithHttpInfo (Guid docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->ArchiveDocument");

            var localVarPath = "/document/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Void/archive signing document Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ArchiveDocumentAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await ArchiveDocumentWithHttpInfoAsync(docId, cancellationToken);

        }

        /// <summary>
        /// Void/archive signing document Delete does not remove permanently but sets it with status 40 (removed)  and archives it.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> ArchiveDocumentWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->ArchiveDocument");

            var localVarPath = "/document/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ArchiveDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Permanently delete signing document Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns></returns>
        public void DeleteDocument (Guid docId)
        {
             DeleteDocumentWithHttpInfo(docId);
        }

        /// <summary>
        /// Permanently delete signing document Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DeleteDocumentWithHttpInfo (Guid docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->DeleteDocument");

            var localVarPath = "/document/{docId}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Permanently delete signing document Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteDocumentAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await DeleteDocumentWithHttpInfoAsync(docId, cancellationToken);

        }

        /// <summary>
        /// Permanently delete signing document Permanently deletes data and files. You must enable group automated deletion. We recommend archiveDocument.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> DeleteDocumentWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->DeleteDocument");

            var localVarPath = "/document/{docId}/delete";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>DocumentResponseDetail</returns>
        public DocumentResponseDetail GetDocument (Guid docId)
        {
             ApiResponse<DocumentResponseDetail> localVarResponse = GetDocumentWithHttpInfo(docId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of DocumentResponseDetail</returns>
        public ApiResponse<DocumentResponseDetail> GetDocumentWithHttpInfo (Guid docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetDocument");

            var localVarPath = "/document/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponseDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentResponseDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentResponseDetail)));
        }

        /// <summary>
        /// Get document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentResponseDetail</returns>
        public async System.Threading.Tasks.Task<DocumentResponseDetail> GetDocumentAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentResponseDetail> localVarResponse = await GetDocumentWithHttpInfoAsync(docId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentResponseDetail)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentResponseDetail>> GetDocumentWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetDocument");

            var localVarPath = "/document/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentResponseDetail>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentResponseDetail) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentResponseDetail)));
        }

        /// <summary>
        /// Get document fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>List&lt;InlineResponse200&gt;</returns>
        public List<InlineResponse200> GetDocumentFields (Guid docId)
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = GetDocumentFieldsWithHttpInfo(docId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get document fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <returns>ApiResponse of List&lt;InlineResponse200&gt;</returns>
        public ApiResponse<List<InlineResponse200>> GetDocumentFieldsWithHttpInfo (Guid docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetDocumentFields");

            var localVarPath = "/document/{docId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse200>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        /// Get document fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;InlineResponse200&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse200>> GetDocumentFieldsAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<InlineResponse200>> localVarResponse = await GetDocumentFieldsWithHttpInfoAsync(docId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get document fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">document id</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse200&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse200>>> GetDocumentFieldsWithHttpInfoAsync (Guid docId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetDocumentFields");

            var localVarPath = "/document/{docId}/fields";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse200>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse200>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse200>)));
        }

        /// <summary>
        /// Location to download PDF Get the PDF for a signing document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream GetDocumentPdf (string docId)
        {
             ApiResponse<System.IO.Stream> localVarResponse = GetDocumentPdfWithHttpInfo(docId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Location to download PDF Get the PDF for a signing document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> GetDocumentPdfWithHttpInfo (string docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetDocumentPdf");

            var localVarPath = "/pdf/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Location to download PDF Get the PDF for a signing document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> GetDocumentPdfAsync (string docId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await GetDocumentPdfWithHttpInfoAsync(docId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Location to download PDF Get the PDF for a signing document
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> GetDocumentPdfWithHttpInfoAsync (string docId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetDocumentPdf");

            var localVarPath = "/pdf/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocumentPdf", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Get signing documents List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <returns>DocumentListResponse</returns>
        public DocumentListResponse GetDocuments (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string))
        {
             ApiResponse<DocumentListResponse> localVarResponse = GetDocumentsWithHttpInfo(archived, email, limit, offset, group, status, nosigners);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signing documents List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <returns>ApiResponse of DocumentListResponse</returns>
        public ApiResponse<DocumentListResponse> GetDocumentsWithHttpInfo (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string))
        {

            var localVarPath = "/document/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archived != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archived", archived)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (nosigners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nosigners", nosigners)); // query parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentListResponse)));
        }

        /// <summary>
        /// Get signing documents List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DocumentListResponse</returns>
        public async System.Threading.Tasks.Task<DocumentListResponse> GetDocumentsAsync (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DocumentListResponse> localVarResponse = await GetDocumentsWithHttpInfoAsync(archived, email, limit, offset, group, status, nosigners, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signing documents List (unarchived) signing documents. Use /status/ if you need high-level information.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="archived">Filter on archived status, default is false (optional, default to &quot;false&quot;)</param>
        /// <param name="email">Filter by signer email (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional, default to 20)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="group">Filter by a specific group (optional)</param>
        /// <param name="status">Filter on document status (optional)</param>
        /// <param name="nosigners">Add value &#39;1&#39; to remove signers information for a faster query (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DocumentListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DocumentListResponse>> GetDocumentsWithHttpInfoAsync (string archived = default(string), string email = default(string), int? limit = default(int?), int? offset = default(int?), string group = default(string), int? status = default(int?), string nosigners = default(string), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/document/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (archived != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "archived", archived)); // query parameter
            if (email != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "email", email)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (group != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "group", group)); // query parameter
            if (status != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "status", status)); // query parameter
            if (nosigners != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "nosigners", nosigners)); // query parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDocuments", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DocumentListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DocumentListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DocumentListResponse)));
        }

        /// <summary>
        /// Get signing document status Faster short query for a document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <returns>StatusResponse</returns>
        public StatusResponse GetStatus (string docId)
        {
             ApiResponse<StatusResponse> localVarResponse = GetStatusWithHttpInfo(docId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signing document status Faster short query for a document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <returns>ApiResponse of StatusResponse</returns>
        public ApiResponse<StatusResponse> GetStatusWithHttpInfo (string docId)
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetStatus");

            var localVarPath = "/status/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusResponse)));
        }

        /// <summary>
        /// Get signing document status Faster short query for a document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StatusResponse</returns>
        public async System.Threading.Tasks.Task<StatusResponse> GetStatusAsync (string docId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<StatusResponse> localVarResponse = await GetStatusWithHttpInfoAsync(docId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signing document status Faster short query for a document status
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="docId">ID of document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StatusResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusResponse>> GetStatusWithHttpInfoAsync (string docId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'docId' is set
            if (docId == null)
                throw new ApiException(400, "Missing required parameter 'docId' when calling DocumentApi->GetStatus");

            var localVarPath = "/status/{docId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (docId != null) localVarPathParams.Add("docId", this.Configuration.ApiClient.ParameterToString(docId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusResponse)));
        }

        /// <summary>
        /// Get signing documents status Shortened faster query for status of signing documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <returns>StatusListResponse</returns>
        public StatusListResponse GetStatuses (string filter = default(string), int? offset = default(int?), int? limit = default(int?))
        {
             ApiResponse<StatusListResponse> localVarResponse = GetStatusesWithHttpInfo(filter, offset, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signing documents status Shortened faster query for status of signing documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <returns>ApiResponse of StatusListResponse</returns>
        public ApiResponse<StatusListResponse> GetStatusesWithHttpInfo (string filter = default(string), int? offset = default(int?), int? limit = default(int?))
        {

            var localVarPath = "/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusListResponse)));
        }

        /// <summary>
        /// Get signing documents status Shortened faster query for status of signing documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of StatusListResponse</returns>
        public async System.Threading.Tasks.Task<StatusListResponse> GetStatusesAsync (string filter = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<StatusListResponse> localVarResponse = await GetStatusesWithHttpInfoAsync(filter, offset, limit, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signing documents status Shortened faster query for status of signing documents
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="filter">Filter on archived status, default is false (optional)</param>
        /// <param name="offset">Offset from start of dataset. Use with the limit query to iterate through dataset. (optional)</param>
        /// <param name="limit">Length of dataset to return. Use with offset query to iterate through results. (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (StatusListResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusListResponse>> GetStatusesWithHttpInfoAsync (string filter = default(string), int? offset = default(int?), int? limit = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (filter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "filter", filter)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StatusListResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (StatusListResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(StatusListResponse)));
        }

        /// <summary>
        /// Create signing document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 PostDocument (DocumentPost documentPost)
        {
             ApiResponse<InlineResponse201> localVarResponse = PostDocumentWithHttpInfo(documentPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create signing document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public ApiResponse<InlineResponse201> PostDocumentWithHttpInfo (DocumentPost documentPost)
        {
            // verify the required parameter 'documentPost' is set
            if (documentPost == null)
                throw new ApiException(400, "Missing required parameter 'documentPost' when calling DocumentApi->PostDocument");

            var localVarPath = "/document/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "example error report"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
                localVarHeaderParams.Add("Host", "eu-api.legalesign.com");

            if (documentPost != null && documentPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");                
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// Create signing document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> PostDocumentAsync (DocumentPost documentPost, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse201> localVarResponse = await PostDocumentWithHttpInfoAsync(documentPost, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create signing document 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPost">Send a document to be signed</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> PostDocumentWithHttpInfoAsync (DocumentPost documentPost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentPost' is set
            if (documentPost == null)
                throw new ApiException(400, "Missing required parameter 'documentPost' when calling DocumentApi->PostDocument");

            var localVarPath = "/document/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "example error report"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentPost != null && documentPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse201>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse201) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse201)));
        }

        /// <summary>
        /// text/html document as pdf preview 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <returns>System.IO.Stream</returns>
        public System.IO.Stream PostPdfPreview (DocumentPdfPreview documentPdfPreview)
        {
             ApiResponse<System.IO.Stream> localVarResponse = PostPdfPreviewWithHttpInfo(documentPdfPreview);
             return localVarResponse.Data;
        }

        /// <summary>
        /// text/html document as pdf preview 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <returns>ApiResponse of System.IO.Stream</returns>
        public ApiResponse<System.IO.Stream> PostPdfPreviewWithHttpInfo (DocumentPdfPreview documentPdfPreview)
        {
            // verify the required parameter 'documentPdfPreview' is set
            if (documentPdfPreview == null)
                throw new ApiException(400, "Missing required parameter 'documentPdfPreview' when calling DocumentApi->PostPdfPreview");

            var localVarPath = "/pdf/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentPdfPreview != null && documentPdfPreview.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentPdfPreview); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentPdfPreview; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// text/html document as pdf preview 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of System.IO.Stream</returns>
        public async System.Threading.Tasks.Task<System.IO.Stream> PostPdfPreviewAsync (DocumentPdfPreview documentPdfPreview, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<System.IO.Stream> localVarResponse = await PostPdfPreviewWithHttpInfoAsync(documentPdfPreview, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// text/html document as pdf preview 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="documentPdfPreview">Data to generate pdf</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (System.IO.Stream)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<System.IO.Stream>> PostPdfPreviewWithHttpInfoAsync (DocumentPdfPreview documentPdfPreview, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'documentPdfPreview' is set
            if (documentPdfPreview == null)
                throw new ApiException(400, "Missing required parameter 'documentPdfPreview' when calling DocumentApi->PostPdfPreview");

            var localVarPath = "/pdf/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/pdf"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (documentPdfPreview != null && documentPdfPreview.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(documentPdfPreview); // http body (model) parameter
            }
            else
            {
                localVarPostBody = documentPdfPreview; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostPdfPreview", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<System.IO.Stream>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (System.IO.Stream) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(System.IO.Stream)));
        }

        /// <summary>
        /// Preview text document signing page Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <returns></returns>
        public void PreviewDocumentSigning (HTMLSigningPreviewPost hTMLSigningPreviewPost)
        {
             PreviewDocumentSigningWithHttpInfo(hTMLSigningPreviewPost);
        }

        /// <summary>
        /// Preview text document signing page Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PreviewDocumentSigningWithHttpInfo (HTMLSigningPreviewPost hTMLSigningPreviewPost)
        {
            // verify the required parameter 'hTMLSigningPreviewPost' is set
            if (hTMLSigningPreviewPost == null)
                throw new ApiException(400, "Missing required parameter 'hTMLSigningPreviewPost' when calling DocumentApi->PreviewDocumentSigning");

            var localVarPath = "/document/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hTMLSigningPreviewPost != null && hTMLSigningPreviewPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(hTMLSigningPreviewPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hTMLSigningPreviewPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviewDocumentSigning", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Preview text document signing page Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PreviewDocumentSigningAsync (HTMLSigningPreviewPost hTMLSigningPreviewPost, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PreviewDocumentSigningWithHttpInfoAsync(hTMLSigningPreviewPost, cancellationToken);

        }

        /// <summary>
        /// Preview text document signing page Returns a redirect response (302) with link in the Location header to a one-use temporary URL you can redirect to, to see a preview of the signing page. Follow the redirect immediately since it expires after a few seconds.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="hTMLSigningPreviewPost">Preview signing page for HTML document</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PreviewDocumentSigningWithHttpInfoAsync (HTMLSigningPreviewPost hTMLSigningPreviewPost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'hTMLSigningPreviewPost' is set
            if (hTMLSigningPreviewPost == null)
                throw new ApiException(400, "Missing required parameter 'hTMLSigningPreviewPost' when calling DocumentApi->PreviewDocumentSigning");

            var localVarPath = "/document/preview";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (hTMLSigningPreviewPost != null && hTMLSigningPreviewPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(hTMLSigningPreviewPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = hTMLSigningPreviewPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PreviewDocumentSigning", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
