/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISignerApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get signer
        /// </summary>
        /// <remarks>
        /// Get status and details of an individual signer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>SignerResponse</returns>
        SignerResponse GetSigner (string signerId);

        /// <summary>
        /// Get signer
        /// </summary>
        /// <remarks>
        /// Get status and details of an individual signer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>ApiResponse of SignerResponse</returns>
        ApiResponse<SignerResponse> GetSignerWithHttpInfo (string signerId);
        /// <summary>
        /// Get signer form fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        List<InlineResponse2002> GetSignerFields (string signerId);

        /// <summary>
        /// Get signer form fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        ApiResponse<List<InlineResponse2002>> GetSignerFieldsWithHttpInfo (string signerId);
        /// <summary>
        /// Get signer access link
        /// </summary>
        /// <remarks>
        /// Returns 1-use link for signer in Location header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns></returns>
        void GetSignerLink (string signerId);

        /// <summary>
        /// Get signer access link
        /// </summary>
        /// <remarks>
        /// Returns 1-use link for signer in Location header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> GetSignerLinkWithHttpInfo (string signerId);
        /// <summary>
        /// Get signer rejection reason
        /// </summary>
        /// <remarks>
        /// Returns reason signer gave for rejecting a document, if given
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 GetSignerRejection (string signerId);

        /// <summary>
        /// Get signer rejection reason
        /// </summary>
        /// <remarks>
        /// Returns reason signer gave for rejecting a document, if given
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> GetSignerRejectionWithHttpInfo (string signerId);
        /// <summary>
        /// Send signer reminder email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <returns></returns>
        void PostSignerReminder (string signerId, SendReminderPost sendReminderPost);

        /// <summary>
        /// Send signer reminder email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSignerReminderWithHttpInfo (string signerId, SendReminderPost sendReminderPost);
        /// <summary>
        /// Reset to earlier signer
        /// </summary>
        /// <remarks>
        /// Reset to an earlier signer if forwarded
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <returns></returns>
        void PostSignerReset (string signerId, SignerResetResponse signerResetResponse);

        /// <summary>
        /// Reset to earlier signer
        /// </summary>
        /// <remarks>
        /// Reset to an earlier signer if forwarded
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostSignerResetWithHttpInfo (string signerId, SignerResetResponse signerResetResponse);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get signer
        /// </summary>
        /// <remarks>
        /// Get status and details of an individual signer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignerResponse</returns>
        System.Threading.Tasks.Task<SignerResponse> GetSignerAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signer
        /// </summary>
        /// <remarks>
        /// Get status and details of an individual signer
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<SignerResponse>> GetSignerWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get signer form fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        System.Threading.Tasks.Task<List<InlineResponse2002>> GetSignerFieldsAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signer form fields
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> GetSignerFieldsWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get signer access link
        /// </summary>
        /// <remarks>
        /// Returns 1-use link for signer in Location header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task GetSignerLinkAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signer access link
        /// </summary>
        /// <remarks>
        /// Returns 1-use link for signer in Location header. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> GetSignerLinkWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get signer rejection reason
        /// </summary>
        /// <remarks>
        /// Returns reason signer gave for rejecting a document, if given
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> GetSignerRejectionAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Get signer rejection reason
        /// </summary>
        /// <remarks>
        /// Returns reason signer gave for rejecting a document, if given
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetSignerRejectionWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Send signer reminder email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostSignerReminderAsync (string signerId, SendReminderPost sendReminderPost, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Send signer reminder email
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostSignerReminderWithHttpInfoAsync (string signerId, SendReminderPost sendReminderPost, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Reset to earlier signer
        /// </summary>
        /// <remarks>
        /// Reset to an earlier signer if forwarded
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostSignerResetAsync (string signerId, SignerResetResponse signerResetResponse, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Reset to earlier signer
        /// </summary>
        /// <remarks>
        /// Reset to an earlier signer if forwarded
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostSignerResetWithHttpInfoAsync (string signerId, SignerResetResponse signerResetResponse, CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SignerApi : ISignerApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SignerApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SignerApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignerApi"/> class
        /// </summary>
        /// <returns></returns>
        public SignerApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SignerApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SignerApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get signer Get status and details of an individual signer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>SignerResponse</returns>
        public SignerResponse GetSigner (string signerId)
        {
             ApiResponse<SignerResponse> localVarResponse = GetSignerWithHttpInfo(signerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signer Get status and details of an individual signer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>ApiResponse of SignerResponse</returns>
        public ApiResponse<SignerResponse> GetSignerWithHttpInfo (string signerId)
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSigner");

            var localVarPath = "/signer/{signerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSigner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SignerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignerResponse)));
        }

        /// <summary>
        /// Get signer Get status and details of an individual signer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of SignerResponse</returns>
        public async System.Threading.Tasks.Task<SignerResponse> GetSignerAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<SignerResponse> localVarResponse = await GetSignerWithHttpInfoAsync(signerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signer Get status and details of an individual signer
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (SignerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SignerResponse>> GetSignerWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSigner");

            var localVarPath = "/signer/{signerId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSigner", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<SignerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (SignerResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SignerResponse)));
        }

        /// <summary>
        /// Get signer form fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>List&lt;InlineResponse2002&gt;</returns>
        public List<InlineResponse2002> GetSignerFields (string signerId)
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = GetSignerFieldsWithHttpInfo(signerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signer form fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>ApiResponse of List&lt;InlineResponse2002&gt;</returns>
        public ApiResponse<List<InlineResponse2002>> GetSignerFieldsWithHttpInfo (string signerId)
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSignerFields");

            var localVarPath = "/signer/{signerId}/fields1";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignerFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2002>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
        }

        /// <summary>
        /// Get signer form fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of List&lt;InlineResponse2002&gt;</returns>
        public async System.Threading.Tasks.Task<List<InlineResponse2002>> GetSignerFieldsAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<List<InlineResponse2002>> localVarResponse = await GetSignerFieldsWithHttpInfoAsync(signerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signer form fields 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (List&lt;InlineResponse2002&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<InlineResponse2002>>> GetSignerFieldsWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSignerFields");

            var localVarPath = "/signer/{signerId}/fields1";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignerFields", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<InlineResponse2002>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (List<InlineResponse2002>) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<InlineResponse2002>)));
        }

        /// <summary>
        /// Get signer access link Returns 1-use link for signer in Location header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns></returns>
        public void GetSignerLink (string signerId)
        {
             GetSignerLinkWithHttpInfo(signerId);
        }

        /// <summary>
        /// Get signer access link Returns 1-use link for signer in Location header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> GetSignerLinkWithHttpInfo (string signerId)
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSignerLink");

            var localVarPath = "/signer/{signerId}/new-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignerLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get signer access link Returns 1-use link for signer in Location header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task GetSignerLinkAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             await GetSignerLinkWithHttpInfoAsync(signerId, cancellationToken);

        }

        /// <summary>
        /// Get signer access link Returns 1-use link for signer in Location header. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId">ID of signer</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> GetSignerLinkWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSignerLink");

            var localVarPath = "/signer/{signerId}/new-link";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignerLink", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Get signer rejection reason Returns reason signer gave for rejecting a document, if given
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 GetSignerRejection (string signerId)
        {
             ApiResponse<InlineResponse2003> localVarResponse = GetSignerRejectionWithHttpInfo(signerId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get signer rejection reason Returns reason signer gave for rejecting a document, if given
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> GetSignerRejectionWithHttpInfo (string signerId)
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSignerRejection");

            var localVarPath = "/signer/{signerId}/rejection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignerRejection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Get signer rejection reason Returns reason signer gave for rejecting a document, if given
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> GetSignerRejectionAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<InlineResponse2003> localVarResponse = await GetSignerRejectionWithHttpInfoAsync(signerId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get signer rejection reason Returns reason signer gave for rejecting a document, if given
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> GetSignerRejectionWithHttpInfoAsync (string signerId, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->GetSignerRejection");

            var localVarPath = "/signer/{signerId}/rejection";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetSignerRejection", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2003>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (InlineResponse2003) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2003)));
        }

        /// <summary>
        /// Send signer reminder email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <returns></returns>
        public void PostSignerReminder (string signerId, SendReminderPost sendReminderPost)
        {
             PostSignerReminderWithHttpInfo(signerId, sendReminderPost);
        }

        /// <summary>
        /// Send signer reminder email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostSignerReminderWithHttpInfo (string signerId, SendReminderPost sendReminderPost)
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->PostSignerReminder");
            // verify the required parameter 'sendReminderPost' is set
            if (sendReminderPost == null)
                throw new ApiException(400, "Missing required parameter 'sendReminderPost' when calling SignerApi->PostSignerReminder");

            var localVarPath = "/signer/{signerId}/send-reminder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter
            if (sendReminderPost != null && sendReminderPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendReminderPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendReminderPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignerReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Send signer reminder email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostSignerReminderAsync (string signerId, SendReminderPost sendReminderPost, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostSignerReminderWithHttpInfoAsync(signerId, sendReminderPost, cancellationToken);

        }

        /// <summary>
        /// Send signer reminder email 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="sendReminderPost">Message text</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostSignerReminderWithHttpInfoAsync (string signerId, SendReminderPost sendReminderPost, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->PostSignerReminder");
            // verify the required parameter 'sendReminderPost' is set
            if (sendReminderPost == null)
                throw new ApiException(400, "Missing required parameter 'sendReminderPost' when calling SignerApi->PostSignerReminder");

            var localVarPath = "/signer/{signerId}/send-reminder";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter
            if (sendReminderPost != null && sendReminderPost.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(sendReminderPost); // http body (model) parameter
            }
            else
            {
                localVarPostBody = sendReminderPost; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignerReminder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset to earlier signer Reset to an earlier signer if forwarded
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <returns></returns>
        public void PostSignerReset (string signerId, SignerResetResponse signerResetResponse)
        {
             PostSignerResetWithHttpInfo(signerId, signerResetResponse);
        }

        /// <summary>
        /// Reset to earlier signer Reset to an earlier signer if forwarded
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> PostSignerResetWithHttpInfo (string signerId, SignerResetResponse signerResetResponse)
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->PostSignerReset");
            // verify the required parameter 'signerResetResponse' is set
            if (signerResetResponse == null)
                throw new ApiException(400, "Missing required parameter 'signerResetResponse' when calling SignerApi->PostSignerReset");

            var localVarPath = "/signer/{signerId}/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter
            if (signerResetResponse != null && signerResetResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signerResetResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signerResetResponse; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignerReset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Reset to earlier signer Reset to an earlier signer if forwarded
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostSignerResetAsync (string signerId, SignerResetResponse signerResetResponse, CancellationToken cancellationToken = default(CancellationToken))
        {
             await PostSignerResetWithHttpInfoAsync(signerId, signerResetResponse, cancellationToken);

        }

        /// <summary>
        /// Reset to earlier signer Reset to an earlier signer if forwarded
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="signerId"></param>
        /// <param name="signerResetResponse">Email of the earlier signer, notify current signer by email of event</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> PostSignerResetWithHttpInfoAsync (string signerId, SignerResetResponse signerResetResponse, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'signerId' is set
            if (signerId == null)
                throw new ApiException(400, "Missing required parameter 'signerId' when calling SignerApi->PostSignerReset");
            // verify the required parameter 'signerResetResponse' is set
            if (signerResetResponse == null)
                throw new ApiException(400, "Missing required parameter 'signerResetResponse' when calling SignerApi->PostSignerReset");

            var localVarPath = "/signer/{signerId}/reset";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (signerId != null) localVarPathParams.Add("signerId", this.Configuration.ApiClient.ParameterToString(signerId)); // path parameter
            if (signerResetResponse != null && signerResetResponse.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(signerResetResponse); // http body (model) parameter
            }
            else
            {
                localVarPostBody = signerResetResponse; // byte array
            }

            // authentication (apikeyAuth) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostSignerReset", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                null);
        }

    }
}
