/*
 * Legalesign API
 *
 * Legalesign.com is an electronic signature software. This is the documentation for its REST API.   Start by creating a trial account at https://app1.legalesign.com/auth/intro/. Upon account activation, select the API dev option.  Get an API key by emailing support@legalesign with background on your use-case and skills. You will need to show experience in API dev.  You will be in sandbox mode that will limit you to 5 signers. Add them on https://app1.legalesign.com/acc/settings/#api. Contact support to move to production mode when you are ready.  For any queries contact us at support@legalesign.com. 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@legalesign.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DocumentApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DocumentApiTests
    {
        private DocumentApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DocumentApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DocumentApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DocumentApi
            //Assert.IsInstanceOf(typeof(DocumentApi), instance);
        }

        
        /// <summary>
        /// Test ArchiveDocument
        /// </summary>
        [Test]
        public void ArchiveDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid docId = null;
            //instance.ArchiveDocument(docId);
            
        }
        
        /// <summary>
        /// Test DeleteDocument
        /// </summary>
        [Test]
        public void DeleteDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid docId = null;
            //instance.DeleteDocument(docId);
            
        }
        
        /// <summary>
        /// Test GetDocument
        /// </summary>
        [Test]
        public void GetDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid docId = null;
            //var response = instance.GetDocument(docId);
            //Assert.IsInstanceOf(typeof(DocumentResponseDetail), response, "response is DocumentResponseDetail");
        }
        
        /// <summary>
        /// Test GetDocumentFields
        /// </summary>
        [Test]
        public void GetDocumentFieldsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Guid docId = null;
            //var response = instance.GetDocumentFields(docId);
            //Assert.IsInstanceOf(typeof(List<InlineResponse200>), response, "response is List<InlineResponse200>");
        }
        
        /// <summary>
        /// Test GetDocumentPdf
        /// </summary>
        [Test]
        public void GetDocumentPdfTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string docId = null;
            //var response = instance.GetDocumentPdf(docId);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test GetDocuments
        /// </summary>
        [Test]
        public void GetDocumentsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string archived = null;
            //string email = null;
            //int? limit = null;
            //int? offset = null;
            //string group = null;
            //int? status = null;
            //string nosigners = null;
            //var response = instance.GetDocuments(archived, email, limit, offset, group, status, nosigners);
            //Assert.IsInstanceOf(typeof(DocumentListResponse), response, "response is DocumentListResponse");
        }
        
        /// <summary>
        /// Test GetStatus
        /// </summary>
        [Test]
        public void GetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string docId = null;
            //var response = instance.GetStatus(docId);
            //Assert.IsInstanceOf(typeof(StatusResponse), response, "response is StatusResponse");
        }
        
        /// <summary>
        /// Test GetStatuses
        /// </summary>
        [Test]
        public void GetStatusesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string filter = null;
            //int? offset = null;
            //int? limit = null;
            //var response = instance.GetStatuses(filter, offset, limit);
            //Assert.IsInstanceOf(typeof(StatusListResponse), response, "response is StatusListResponse");
        }
        
        /// <summary>
        /// Test PostDocument
        /// </summary>
        [Test]
        public void PostDocumentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentPost documentPost = null;
            //var response = instance.PostDocument(documentPost);
            //Assert.IsInstanceOf(typeof(InlineResponse201), response, "response is InlineResponse201");
        }
        
        /// <summary>
        /// Test PostPdfPreview
        /// </summary>
        [Test]
        public void PostPdfPreviewTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //DocumentPdfPreview documentPdfPreview = null;
            //var response = instance.PostPdfPreview(documentPdfPreview);
            //Assert.IsInstanceOf(typeof(System.IO.Stream), response, "response is System.IO.Stream");
        }
        
        /// <summary>
        /// Test PreviewDocumentSigning
        /// </summary>
        [Test]
        public void PreviewDocumentSigningTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //HTMLSigningPreviewPost hTMLSigningPreviewPost = null;
            //instance.PreviewDocumentSigning(hTMLSigningPreviewPost);
            
        }
        
    }

}
